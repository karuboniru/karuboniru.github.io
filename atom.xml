<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Karuboniru&#39;s Blog</title>
  
  <subtitle>羰基的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yanqiyu.info/"/>
  <updated>2021-05-06T15:32:57.000Z</updated>
  <id>https://yanqiyu.info/</id>
  
  <author>
    <name>Karuboniru</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>上手 Fedora CoreOS，以搭建代理为例</title>
    <link href="https://yanqiyu.info/2021/05/06/hands-on-coreos/"/>
    <id>https://yanqiyu.info/2021/05/06/hands-on-coreos/</id>
    <published>2021-05-06T15:32:57.000Z</published>
    <updated>2021-05-06T15:32:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>前几天，Vultr 的洛杉矶机房维护，我的主力代理自然就断掉了，于是临时启动了一个机器用来救急。虽然有一个脚本用来处理配置代理需要的步骤，但是因为脚本忘了写防火墙规则导致我迷惑了足足有半分钟（然后想起来我上次用这个脚本的时候也是手动 ssh 上去添加防火墙规则的）。</p><p>退一步越想越气，于是突然想到妮可艹提到过 <a href="https://getfedora.org/en/coreos?stream=stable">Fedora CoreOS</a> 很适合这类工作，顺便我正好学习下这东西怎么用。</p><h2 id="在-vultr-上通过-coreos-部署-v2ray">在 Vultr 上通过 CoreOS 部署 V2ray</h2><p>说干就干，先看看<a href="https://docs.fedoraproject.org/en-US/fedora-coreos/">文档</a>，琢磨琢磨，然后糊一个 Fedora CoreOS Config 文件。 <figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Yaml"><span class="hljs-attr">variant:</span> <span class="hljs-string">fcos</span><br><span class="hljs-attr">version:</span> <span class="hljs-number">1.0</span><span class="hljs-number">.0</span><br><span class="hljs-attr">passwd:</span><br>  <span class="hljs-attr">users:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">core</span><br>      <span class="hljs-attr">ssh_authorized_keys:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;ecdsa-sha2-nistp384 AAAAE2VjZHNhLXNoYTItbmlzdHAzODQAAAAIbmlzdHAzODQAAABhBFlngteAj8k7Fv0Ht6dFtQvA+Svxn/qnTuDfUzEvaU33QEyN9jDaJyMdct4elU9ec9aQheskwv5ULSvv7lzgs4ZhgtgGNRfH0mC8cI49DGdSxucaAuPiHmKNTfQa88iZxg== CARD AUTH pubkey pkcs11:id=%04;object=CARD%20AUTH%20pubkey;token=Karuboniru;manufacturer=piv_II?module-path=/usr/lib64/pkcs11/opensc-pkcs11.so&quot;</span><br>      <span class="hljs-attr">groups:</span> [ <span class="hljs-string">sudo</span>, <span class="hljs-string">wheel</span> ]<br><span class="hljs-attr">storage:</span><br>  <span class="hljs-attr">files:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/var/lib/v2ray/config.json</span><br>      <span class="hljs-attr">overwrite:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">contents:</span> <br>        <span class="hljs-attr">inline:</span> <span class="hljs-string">|</span><br>          &#123;<br>            <span class="hljs-attr">&quot;inbounds&quot;:</span> [<br>              &#123;<br>                <span class="hljs-attr">&quot;port&quot;:</span> <span class="hljs-string">&lt;YOUR-PORT-HERE&gt;</span>,<br>                <span class="hljs-attr">&quot;protocol&quot;:</span> <span class="hljs-string">&quot;vmess&quot;</span>,<br>                <span class="hljs-attr">&quot;settings&quot;:</span> &#123;<br>                  <span class="hljs-attr">&quot;clients&quot;:</span> [<br>                    &#123;<br>                      <span class="hljs-attr">&quot;id&quot;:</span> <span class="hljs-string">&quot;&lt;YOUR-UUID-HERE&gt;&quot;</span>,<br>                      <span class="hljs-attr">&quot;alterId&quot;:</span> <span class="hljs-number">64</span><br>                    &#125;   <br>                  ]<br>                &#125;<br>              &#125;<br>            ],<br>            <span class="hljs-attr">&quot;outbounds&quot;:</span> [<br>              &#123;<br>                <span class="hljs-attr">&quot;protocol&quot;:</span> <span class="hljs-string">&quot;freedom&quot;</span>,<br>                <span class="hljs-attr">&quot;settings&quot;:</span> &#123;&#125;<br>              &#125;<br>            ]<br>          &#125;<br>      <span class="hljs-attr">mode:</span> <span class="hljs-number">0644</span><br><span class="hljs-attr">systemd:</span><br>  <span class="hljs-attr">units:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">v2ray.service</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">contents:</span> <span class="hljs-string">|</span><br>        [<span class="hljs-string">Unit</span>]<br>        <span class="hljs-string">Description=Run</span> <span class="hljs-string">v2ray</span><br>        <span class="hljs-string">After=network-online.target</span><br>        <span class="hljs-string">Wants=network-online.target</span><br><br>        [<span class="hljs-string">Service</span>]<br>        <span class="hljs-string">ExecStartPre=-/bin/podman</span> <span class="hljs-string">kill</span> <span class="hljs-string">v2ray</span><br>        <span class="hljs-string">ExecStartPre=-/bin/podman</span> <span class="hljs-string">rm</span> <span class="hljs-string">v2ray</span><br>        <span class="hljs-string">ExecStartPre=-/bin/podman</span> <span class="hljs-string">pull</span> <span class="hljs-string">docker.io/v2fly/v2fly-core:latest</span><br>        <span class="hljs-string">ExecStart=/bin/podman</span> <span class="hljs-string">run</span> <span class="hljs-string">--name</span> <span class="hljs-string">v2ray</span> <span class="hljs-string">--volume</span> <span class="hljs-string">/var/lib/v2ray:/etc/v2ray:z</span> <span class="hljs-string">--net=host</span> <span class="hljs-string">docker.io/v2fly/v2fly-core:latest</span><br>        <span class="hljs-string">ExecStop=/bin/podman</span> <span class="hljs-string">stop</span> <span class="hljs-string">v2ray</span><br><br>        [<span class="hljs-string">Install</span>]<br>        <span class="hljs-string">WantedBy=multi-user.target</span><br></code></pre></div></td></tr></table></figure> 我们来拆开看看这个文件 <figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Yaml"><span class="hljs-attr">variant:</span> <span class="hljs-string">fcos</span><br><span class="hljs-attr">version:</span> <span class="hljs-number">1.0</span><span class="hljs-number">.0</span><br></code></pre></div></td></tr></table></figure> 上面意思是我要构建一个 <code>fcos</code> 系统，并且配置文件格式是 <code>1.0.0</code>。</p><p><code>"ecdsa-sha2-nistp384 AAAAE2VjZHNhLXNoYTItbmlzdHAzODQAAAAIbmlzdHAzODQAAABhBFlngteAj8k7Fv0Ht6dFtQvA+Svxn/qnTuDfUzEvaU33QEyN9jDaJyMdct4elU9ec9aQheskwv5ULSvv7lzgs4ZhgtgGNRfH0mC8cI49DGdSxucaAuPiHmKNTfQa88iZxg== CARD AUTH pubkey pkcs11:id=%04;object=CARD%20AUTH%20pubkey;token=Karuboniru;manufacturer=piv_II?module-path=/usr/lib64/pkcs11/opensc-pkcs11.so"</code> 是我的 ssh 公钥，之后需要维护可能用到。</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Yaml"><span class="hljs-attr">storage:</span><br>  <span class="hljs-attr">files:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/var/lib/v2ray/config.json</span><br>      <span class="hljs-attr">overwrite:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">contents:</span> <br>        <span class="hljs-attr">inline:</span> <span class="hljs-string">|</span><br>          &#123;<br>            <span class="hljs-attr">&quot;inbounds&quot;:</span> [<br>              &#123;<br>                <span class="hljs-attr">&quot;port&quot;:</span> <span class="hljs-string">&lt;YOUR-PORT-HERE&gt;</span>,<br>                <span class="hljs-attr">&quot;protocol&quot;:</span> <span class="hljs-string">&quot;vmess&quot;</span>,<br>                <span class="hljs-attr">&quot;settings&quot;:</span> &#123;<br>                  <span class="hljs-attr">&quot;clients&quot;:</span> [<br>                    &#123;<br>                      <span class="hljs-attr">&quot;id&quot;:</span> <span class="hljs-string">&quot;&lt;YOUR-UUID-HERE&gt;&quot;</span>,<br>                      <span class="hljs-attr">&quot;alterId&quot;:</span> <span class="hljs-number">64</span><br>                    &#125;   <br>                  ]<br>                &#125;<br>              &#125;<br>            ],<br>            <span class="hljs-attr">&quot;outbounds&quot;:</span> [<br>              &#123;<br>                <span class="hljs-attr">&quot;protocol&quot;:</span> <span class="hljs-string">&quot;freedom&quot;</span>,<br>                <span class="hljs-attr">&quot;settings&quot;:</span> &#123;&#125;<br>              &#125;<br>            ]<br>          &#125;<br>      <span class="hljs-attr">mode:</span> <span class="hljs-number">0644</span><br></code></pre></div></td></tr></table></figure><p>这是放一个配置文件到 <code>/var/lib/v2ray/config.json</code>，至于 <code>/etc</code> 尽可能留给包管理。</p><p>最后是添加一个自动启动的 systemd unit <figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Yaml"><span class="hljs-attr">systemd:</span><br>  <span class="hljs-attr">units:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">v2ray.service</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">contents:</span> <span class="hljs-string">|</span><br>        [<span class="hljs-string">Unit</span>]<br>        <span class="hljs-string">Description=Run</span> <span class="hljs-string">v2ray</span><br>        <span class="hljs-string">After=network-online.target</span><br>        <span class="hljs-string">Wants=network-online.target</span><br><br>        [<span class="hljs-string">Service</span>]<br>        <span class="hljs-string">ExecStartPre=-/bin/podman</span> <span class="hljs-string">kill</span> <span class="hljs-string">v2ray</span><br>        <span class="hljs-string">ExecStartPre=-/bin/podman</span> <span class="hljs-string">rm</span> <span class="hljs-string">v2ray</span><br>        <span class="hljs-string">ExecStartPre=-/bin/podman</span> <span class="hljs-string">pull</span> <span class="hljs-string">docker.io/v2fly/v2fly-core:latest</span><br>        <span class="hljs-string">ExecStart=/bin/podman</span> <span class="hljs-string">run</span> <span class="hljs-string">--name</span> <span class="hljs-string">v2ray</span> <span class="hljs-string">--volume</span> <span class="hljs-string">/var/lib/v2ray:/etc/v2ray:z</span> <span class="hljs-string">--net=host</span> <span class="hljs-string">docker.io/v2fly/v2fly-core:latest</span><br>        <span class="hljs-string">ExecStop=/bin/podman</span> <span class="hljs-string">stop</span> <span class="hljs-string">v2ray</span><br><br>        [<span class="hljs-string">Install</span>]<br>        <span class="hljs-string">WantedBy=multi-user.target</span><br></code></pre></div></td></tr></table></figure> 这个 unit 会通过 <a href="https://podman.io/">Podman</a> 拉取 <a href="https://hub.docker.com/r/v2fly/v2fly-core">V2ray 的 Docker 镜像</a> 并创建一个容器，将 <code>/var/lib/v2ray</code> 挂载到容器内的 <code>/etc/v2ray</code>，并指定 <code>net=host</code>，也就是容器不隔离网络。</p><p>FCC 文件是一个易读的 Yaml 文件，之后要用 <a href="https://github.com/coreos/butane">Butane</a> 工具进行转换。</p><p>首先要安装 Butane</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">sudo dnf install butane<br></code></pre></div></td></tr></table></figure><p>然后用你的 fcc 文件喂给它...假定它的名字是 <code>fcos.fcc</code> <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">butane fcos.fcc<br></code></pre></div></td></tr></table></figure> 于是会输出一段混沌的 json 到终端，这就是 ign 文件，复制这段输出。转到 <a href="https://www.vultr.com/?ref=8404229-6G">Vultr (With Referral)</a>，创建服务器，选择区域并在 <code>Server Type</code> 处选择 CoreOS： <img src="https://cdn.jsdelivr.net/gh/karuboniru/blog_imgs@master/20210506233322.png" alt="Vultr Server Type" /> 把上面的 <code>butane fcos.fcc</code> 的输出粘贴到框框里面。然后按需修改配置，选择 <code>Deploy Now</code> 就完成了部署。记下 ip 配置好客户端就能用了。</p><hr /><p>OK，接下来就是肮脏的 workarounds 了</p><h2 id="vultr-的-fedora-coreos-太老了">Vultr 的 Fedora CoreOS 太老了</h2><p>我虽然在工单系统反馈了这个问题，但是估计一时半会不会有修复，你可能需要手动上去 <code>rpm-ostree update</code> 更新一下——因为 CoreOS 自带的 <code>zincati</code> 在那个版本上面是默认禁用自动更新的。</p><p>你也可以加上 <figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Yaml"><span class="hljs-attr">links:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/zincati/config.d/95-disable-on-dev.toml</span><br>    <span class="hljs-attr">overwrite:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">target:</span> <span class="hljs-string">/dev/null</span><br>    <span class="hljs-attr">hard:</span> <span class="hljs-literal">false</span><br></code></pre></div></td></tr></table></figure> 到 <code>storage</code> 部分，这会启用自动更新，理论上它会允许系统随后自动更新到最新版本的 CoreOS。</p><h2 id="开-bbr">开 BBR</h2><p>这个简单，在 <code>files</code> 下面加上 <figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/modules-load.d/80-bbr.conf</span><br>  <span class="hljs-attr">contents:</span><br>    <span class="hljs-attr">inline:</span> <span class="hljs-string">|</span><br>      <span class="hljs-string">tcp_bbr</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/sysctl.d/80-bbr.conf</span><br>  <span class="hljs-attr">contents:</span><br>    <span class="hljs-attr">inline:</span> <span class="hljs-string">|</span><br>      <span class="hljs-string">net.ipv4.tcp_congestion_control</span> <span class="hljs-string">=</span> <span class="hljs-string">bbr</span>  <br></code></pre></div></td></tr></table></figure> 就有了 BBR。</p><h2 id="用-sshd.socket-而不是-sshd.service">用 <code>sshd.socket</code> 而不是 <code>sshd.service</code></h2><p>可能能省点内存，因为 ssh 用的并不是很频繁。但是可能因为 Vultr 的 CoreOS 版本太老的原因，在 <code>systemd</code> 段加上： <figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">sshd.socket</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">sshd.service</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br></code></pre></div></td></tr></table></figure> 不好使，需要做的是在 <code>systemd</code> 段加上 <figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">sshd.socket</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure> 并在 <code>links</code> 里面加上 <figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/systemd/system/sshd.service</span><br>  <span class="hljs-attr">overwrite:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">target:</span> <span class="hljs-string">/dev/null</span><br>  <span class="hljs-attr">hard:</span> <span class="hljs-literal">false</span><br></code></pre></div></td></tr></table></figure> 来 mask 掉 <code>sshd.service</code>。</p><h2 id="切换到-cgroup-v2">切换到 CGroup V2</h2><p>只是个人喜好罢了...在 <code>systemd</code> 段下面加 <figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">cgroups-v2-karg.service</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">contents:</span> <span class="hljs-string">|</span><br>    [<span class="hljs-string">Unit</span>]<br>    <span class="hljs-string">Description=Switch</span> <span class="hljs-string">To</span> <span class="hljs-string">cgroups</span> <span class="hljs-string">v2</span><br>    <span class="hljs-comment"># We run after `systemd-machine-id-commit.service` to ensure that</span><br>    <span class="hljs-comment"># `ConditionFirstBoot=true` services won&#x27;t rerun on the next boot.</span><br>    <span class="hljs-string">After=systemd-machine-id-commit.service</span><br>    <span class="hljs-string">ConditionKernelCommandLine=systemd.unified_cgroup_hierarchy</span><br>    <span class="hljs-string">ConditionPathExists=!/var/lib/cgroups-v2-karg.stamp</span><br><br>    [<span class="hljs-string">Service</span>]<br>    <span class="hljs-string">Type=oneshot</span><br>    <span class="hljs-string">RemainAfterExit=yes</span><br>    <span class="hljs-string">ExecStart=/bin/rpm-ostree</span> <span class="hljs-string">kargs</span> <span class="hljs-string">--delete=systemd.unified_cgroup_hierarchy</span><br>    <span class="hljs-string">ExecStart=/bin/touch</span> <span class="hljs-string">/var/lib/cgroups-v2-karg.stamp</span><br>    <span class="hljs-string">ExecStart=/bin/systemctl</span> <span class="hljs-string">--no-block</span> <span class="hljs-string">reboot</span><br><br>    [<span class="hljs-string">Install</span>]<br>    <span class="hljs-string">WantedBy=multi-user.target</span><br></code></pre></div></td></tr></table></figure></p><h2 id="更改-ign-文件重新部署">更改 ign 文件重新部署</h2><p>令人震惊的是，Vultr 不提供这个功能，他们的技术支持建议是 reserve 现在的 ip，应用到新部署的机器上...听着就很傻。于是只能曲线救国：</p><h3 id="把真正的-ign-文件放到-github-gist">把真正的 ign 文件放到 GitHub Gist</h3><p>在 <a href="https://gist.github.com/">Gist</a> 放下前面 butane 输出的 ign 文件（最好是 Secret Gist）。然后导出它的 raw 链接，一般格式是：<code>https://gist.githubusercontent.com/&lt;username&gt;/&lt;id&gt;/raw/&lt;commit&gt;/&lt;name&gt;.ign</code>，对应的写一个 fcc 文件，内容是 <figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Yaml"><span class="hljs-attr">variant:</span> <span class="hljs-string">fcos</span><br><span class="hljs-attr">version:</span> <span class="hljs-number">1.0</span><span class="hljs-number">.0</span><br><span class="hljs-attr">ignition:</span><br>  <span class="hljs-attr">config:</span><br>    <span class="hljs-attr">replace:</span><br>      <span class="hljs-attr">source:</span> <span class="hljs-string">https://gist.githubusercontent.com/&lt;username&gt;/&lt;id&gt;/raw/&lt;name&gt;.ign</span><br></code></pre></div></td></tr></table></figure> 里面链接要去掉 <code>&lt;commit&gt;</code> 这一级，保证始终拉取最新版本。要是有更好的存放 ign 文件的地方欢迎指出。</p><p>于是用这个 fcc 文件，配合 butane 输出 ign 文件部署。之后想要更改 ign 重新部署就更改对应 Gist，然后再 Vultr 面板选择 Reinstall 即可。</p><h2 id="我的-firewalld-呢">我的 FirewallD 呢</h2><p>答案是 FirewallD 没了，整个 CoreOS 就没 Python，自然就没了 FirewallD。虽然可以靠 <code>/etc/sysconfig/nftables.conf</code> + <code>nftables.service</code> 解决问题，但是考虑到 CoreOS 上本来就没运行需要拦住的服务，于是没有防火墙就没有吧XD。</p><hr /><h2 id="最后-fcc-文件长啥样">最后 FCC 文件长啥样</h2><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Yaml"><span class="hljs-attr">variant:</span> <span class="hljs-string">fcos</span><br><span class="hljs-attr">version:</span> <span class="hljs-number">1.0</span><span class="hljs-number">.0</span><br><span class="hljs-attr">passwd:</span><br>  <span class="hljs-attr">users:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">core</span><br>      <span class="hljs-attr">ssh_authorized_keys:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;ecdsa-sha2-nistp384 AAAAE2VjZHNhLXNoYTItbmlzdHAzODQAAAAIbmlzdHAzODQAAABhBFlngteAj8k7Fv0Ht6dFtQvA+Svxn/qnTuDfUzEvaU33QEyN9jDaJyMdct4elU9ec9aQheskwv5ULSvv7lzgs4ZhgtgGNRfH0mC8cI49DGdSxucaAuPiHmKNTfQa88iZxg== CARD AUTH pubkey pkcs11:id=%04;object=CARD%20AUTH%20pubkey;token=Karuboniru;manufacturer=piv_II?module-path=/usr/lib64/pkcs11/opensc-pkcs11.so&quot;</span><br>      <span class="hljs-attr">groups:</span> [ <span class="hljs-string">sudo</span>, <span class="hljs-string">wheel</span> ]<br><span class="hljs-attr">storage:</span><br>  <span class="hljs-attr">files:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/var/lib/v2ray/config.json</span><br>      <span class="hljs-attr">overwrite:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">contents:</span> <br>        <span class="hljs-attr">inline:</span> <span class="hljs-string">|</span><br>          &#123;<br>            <span class="hljs-attr">&quot;inbounds&quot;:</span> [<br>              &#123;<br>                <span class="hljs-attr">&quot;port&quot;:</span> <span class="hljs-string">&lt;YOUR-PORT-HERE&gt;</span>,<br>                <span class="hljs-attr">&quot;protocol&quot;:</span> <span class="hljs-string">&quot;vmess&quot;</span>,<br>                <span class="hljs-attr">&quot;settings&quot;:</span> &#123;<br>                  <span class="hljs-attr">&quot;clients&quot;:</span> [<br>                    &#123;<br>                      <span class="hljs-attr">&quot;id&quot;:</span> <span class="hljs-string">&quot;&lt;YOUR-UUID-HERE&gt;&quot;</span>,<br>                      <span class="hljs-attr">&quot;alterId&quot;:</span> <span class="hljs-number">64</span><br>                    &#125;   <br>                  ]<br>                &#125;<br>              &#125;<br>            ],<br>            <span class="hljs-attr">&quot;outbounds&quot;:</span> [<br>              &#123;<br>                <span class="hljs-attr">&quot;protocol&quot;:</span> <span class="hljs-string">&quot;freedom&quot;</span>,<br>                <span class="hljs-attr">&quot;settings&quot;:</span> &#123;&#125;<br>              &#125;<br>            ]<br>          &#125;<br>      <span class="hljs-attr">mode:</span> <span class="hljs-number">0644</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/modules-load.d/80-bbr.conf</span><br>      <span class="hljs-attr">contents:</span><br>        <span class="hljs-attr">inline:</span> <span class="hljs-string">|</span><br>          <span class="hljs-string">tcp_bbr</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/sysctl.d/80-bbr.conf</span><br>      <span class="hljs-attr">contents:</span><br>        <span class="hljs-attr">inline:</span> <span class="hljs-string">|</span><br>          <span class="hljs-string">net.ipv4.tcp_congestion_control</span> <span class="hljs-string">=</span> <span class="hljs-string">bbr</span>  <br>  <span class="hljs-attr">links:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/zincati/config.d/95-disable-on-dev.toml</span><br>      <span class="hljs-attr">overwrite:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">target:</span> <span class="hljs-string">/dev/null</span><br>      <span class="hljs-attr">hard:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/systemd/system/sshd.service</span><br>      <span class="hljs-attr">overwrite:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">target:</span> <span class="hljs-string">/dev/null</span><br>      <span class="hljs-attr">hard:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">systemd:</span><br>  <span class="hljs-attr">units:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">v2ray.service</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">contents:</span> <span class="hljs-string">|</span><br>        [<span class="hljs-string">Unit</span>]<br>        <span class="hljs-string">Description=Run</span> <span class="hljs-string">v2ray</span><br>        <span class="hljs-string">After=network-online.target</span><br>        <span class="hljs-string">Wants=network-online.target</span><br><br>        [<span class="hljs-string">Service</span>]<br>        <span class="hljs-string">ExecStartPre=-/bin/podman</span> <span class="hljs-string">kill</span> <span class="hljs-string">v2ray</span><br>        <span class="hljs-string">ExecStartPre=-/bin/podman</span> <span class="hljs-string">rm</span> <span class="hljs-string">v2ray</span><br>        <span class="hljs-string">ExecStartPre=-/bin/podman</span> <span class="hljs-string">pull</span> <span class="hljs-string">docker.io/v2fly/v2fly-core:latest</span><br>        <span class="hljs-string">ExecStart=/bin/podman</span> <span class="hljs-string">run</span> <span class="hljs-string">--name</span> <span class="hljs-string">v2ray</span> <span class="hljs-string">--volume</span> <span class="hljs-string">/var/lib/v2ray:/etc/v2ray:z</span> <span class="hljs-string">--net=host</span> <span class="hljs-string">docker.io/v2fly/v2fly-core:latest</span><br>        <span class="hljs-string">ExecStop=/bin/podman</span> <span class="hljs-string">stop</span> <span class="hljs-string">v2ray</span><br><br>        [<span class="hljs-string">Install</span>]<br>        <span class="hljs-string">WantedBy=multi-user.target</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">cgroups-v2-karg.service</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">contents:</span> <span class="hljs-string">|</span><br>        [<span class="hljs-string">Unit</span>]<br>        <span class="hljs-string">Description=Switch</span> <span class="hljs-string">To</span> <span class="hljs-string">cgroups</span> <span class="hljs-string">v2</span><br>        <span class="hljs-comment"># We run after `systemd-machine-id-commit.service` to ensure that</span><br>        <span class="hljs-comment"># `ConditionFirstBoot=true` services won&#x27;t rerun on the next boot.</span><br>        <span class="hljs-string">After=systemd-machine-id-commit.service</span><br>        <span class="hljs-string">ConditionKernelCommandLine=systemd.unified_cgroup_hierarchy</span><br>        <span class="hljs-string">ConditionPathExists=!/var/lib/cgroups-v2-karg.stamp</span><br><br>        [<span class="hljs-string">Service</span>]<br>        <span class="hljs-string">Type=oneshot</span><br>        <span class="hljs-string">RemainAfterExit=yes</span><br>        <span class="hljs-string">ExecStart=/bin/rpm-ostree</span> <span class="hljs-string">kargs</span> <span class="hljs-string">--delete=systemd.unified_cgroup_hierarchy</span><br>        <span class="hljs-string">ExecStart=/bin/touch</span> <span class="hljs-string">/var/lib/cgroups-v2-karg.stamp</span><br>        <span class="hljs-string">ExecStart=/bin/systemctl</span> <span class="hljs-string">--no-block</span> <span class="hljs-string">reboot</span><br><br>        [<span class="hljs-string">Install</span>]<br>        <span class="hljs-string">WantedBy=multi-user.target</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">sshd.socket</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Switch to systemd-boot and Unified Kernel Image on Fedora</title>
    <link href="https://yanqiyu.info/2021/04/30/systemd-boot-and-unified-kernel-image/"/>
    <id>https://yanqiyu.info/2021/04/30/systemd-boot-and-unified-kernel-image/</id>
    <published>2021-04-30T03:32:57.000Z</published>
    <updated>2021-04-30T03:32:57.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-danger">            <p>I am not responsible for bricked computers, system instabilities, dead cats, thermonuclear war or you getting fired because you lost important work.</p><p>Please make a backup of your device or of the data, and make a boot drive in case of necessity. Do some research if you have any concerns about steps documented in this guide.</p><p>YOU are choosing to make these modifications, and if you point the finger at me for messing up your device, I will laugh at you.</p>          </div><h2 id="why-are-you-doing-this-kind-of-wried-thing">Why are you doing this kind of wried thing?</h2><p>Ok... Since I want to sign secure boot on my own, without breaking Fedora's current multi-kernel behavior. Luckily that <a href="https://www.freedesktop.org/software/systemd/man/kernel-install.html">kernel-install.d</a> provides enough power to customize kernel install process.</p><h2 id="switch-to-systemd-boot-from-grubshim">Switch to Systemd-Boot (from Grub+Shim)</h2><div class="note note-danger">            <p>ENSURE YOU ARE ON UEFI BEFORE DOING THIS.</p>          </div><p>It is basically same as <a href="https://kowalski7cc.xyz/blog/systemd-boot-fedora-32">kowalski7cc's article</a> with minor modifications to make it work with Unified Kernel Image</p><h3 id="move-efi-mount-point">Move efi mount point</h3><p>You may want to check if modifications to <code>/etc/fstab</code> is sanity. <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">sudo mkdir /efi<br>sudo sed -i <span class="hljs-string">&quot;s|/boot/efi|/efi|g&quot;</span> /etc/fstab<br></code></pre></div></td></tr></table></figure> Now remount efi: <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">sudo umount /boot/efi<br>sudo mount /efi<br></code></pre></div></td></tr></table></figure></p><h3 id="install-systemd-boot">Install systemd-boot</h3><p>You may want to backup files at <code>/boot/efi</code> and <code>/boot</code> before this. <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">sudo mkdir /efi/$(cat /etc/machine-id)<br>sudo rm /etc/dnf/protected.d/grub* /etc/dnf/protected.d/shim*   <span class="hljs-comment"># needed in some cases, if next command won&#x27;t run.</span><br><span class="hljs-comment"># in case following command fails, delete /etc/dnf/protected.d/grub* and /etc/dnf/protected.d/shim*</span><br>sudo dnf remove grubby grub2\* shim\* memtest86\ &amp;&amp; sudo rm -rf /boot/grub2 &amp;&amp; sudo rm -rf /boot/loader<br>cat /proc/cmdline | cut -d <span class="hljs-string">&#x27; &#x27;</span> -f 2- | sudo tee /etc/kernel/cmdline<br>sudo bootctl install<br></code></pre></div></td></tr></table></figure> And you may umount <code>/boot</code> and remove its fstab entry now since it will no longer be used.</p><div class="note note-danger">            <p>DO NOT REBOOT UNTIL I TOLD YOU THAT YOU CAN.</p>          </div><h2 id="change-kernel-install-scripts-to-enable-unified-kernel-image">Change kernel-install scripts to enable Unified Kernel Image</h2><h3 id="disable-old-initrd-generation">Disable old initrd generation</h3><p>Do following: <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">sudo ln -s /dev/null /etc/kernel/install.d/50-dracut.install<br></code></pre></div></td></tr></table></figure> to disable default initrd generation and installation, we are going to move this work in other scripts.</p><h3 id="change-installation-of-kernel-image">Change installation of kernel image</h3><p>Create file at <code>/etc/kernel/install.d/90-loaderentry.install</code> with contents <a href="https://gist.github.com/karuboniru/d47b0a70f53614d90d30946745c33ab9">here</a> <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash"><span class="hljs-meta">#!/usr/bin/bash</span><br><span class="hljs-comment"># -*- mode: shell-script; indent-tabs-mode: nil; sh-basic-offset: 4; -*-</span><br><span class="hljs-comment"># ex: ts=8 sw=4 sts=4 et filetype=sh</span><br><span class="hljs-comment"># SPDX-License-Identifier: LGPL-2.1-or-later</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># This file is part of systemd.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># systemd is free software; you can redistribute it and/or modify it</span><br><span class="hljs-comment"># under the terms of the GNU Lesser General Public License as published by</span><br><span class="hljs-comment"># the Free Software Foundation; either version 2.1 of the License, or</span><br><span class="hljs-comment"># (at your option) any later version.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># systemd is distributed in the hope that it will be useful, but</span><br><span class="hljs-comment"># WITHOUT ANY WARRANTY; without even the implied warranty of</span><br><span class="hljs-comment"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU</span><br><span class="hljs-comment"># General Public License for more details.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># You should have received a copy of the GNU Lesser General Public License</span><br><span class="hljs-comment"># along with systemd; If not, see &lt;http://www.gnu.org/licenses/&gt;.</span><br><br>COMMAND=<span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span><br>KERNEL_VERSION=<span class="hljs-string">&quot;<span class="hljs-variable">$2</span>&quot;</span><br>ENTRY_DIR_ABS=<span class="hljs-string">&quot;<span class="hljs-variable">$3</span>&quot;</span><br>KERNEL_IMAGE=<span class="hljs-string">&quot;<span class="hljs-variable">$4</span>&quot;</span><br>INITRD_OPTIONS_START=<span class="hljs-string">&quot;5&quot;</span><br><br>MACHINE_ID=<span class="hljs-variable">$KERNEL_INSTALL_MACHINE_ID</span><br><br>BOOT_ROOT=<span class="hljs-variable">$&#123;ENTRY_DIR_ABS%/$MACHINE_ID/$KERNEL_VERSION&#125;</span><br>BOOT_MNT=$(<span class="hljs-built_in">stat</span> -c %m <span class="hljs-variable">$BOOT_ROOT</span>)<br>ENTRY_DIR=<span class="hljs-variable">$&#123;ENTRY_DIR_ABS#$BOOT_MNT&#125;</span><br><br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$COMMAND</span> == remove ]]; <span class="hljs-keyword">then</span><br>    rm -f <span class="hljs-string">&quot;<span class="hljs-variable">$BOOT_ROOT</span>/loader/entries/<span class="hljs-variable">$MACHINE_ID</span>-<span class="hljs-variable">$KERNEL_VERSION</span>.conf&quot;</span><br>    rm -f <span class="hljs-string">&quot;<span class="hljs-variable">$BOOT_ROOT</span>/loader/entries/<span class="hljs-variable">$MACHINE_ID</span>-<span class="hljs-variable">$KERNEL_VERSION</span>+&quot;</span>*<span class="hljs-string">&quot;.conf&quot;</span><br>    rm -f <span class="hljs-string">&quot;<span class="hljs-variable">$BOOT_ROOT</span>/EFI/Linux/<span class="hljs-variable">$KERNEL_VERSION</span>-<span class="hljs-variable">$MACHINE_ID</span>.efi&quot;</span><br>    rm -f <span class="hljs-string">&quot;<span class="hljs-variable">$BOOT_ROOT</span>/EFI/Linux/<span class="hljs-variable">$KERNEL_VERSION</span>-<span class="hljs-variable">$MACHINE_ID</span>+&quot;</span>*<span class="hljs-string">&quot;.efi&quot;</span><br>    <span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> ! [[ <span class="hljs-variable">$COMMAND</span> == add ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> ! [[ <span class="hljs-variable">$KERNEL_IMAGE</span> ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [[ -f /etc/os-release ]]; <span class="hljs-keyword">then</span><br>    . /etc/os-release<br><span class="hljs-keyword">elif</span> [[ -f /usr/lib/os-release ]]; <span class="hljs-keyword">then</span><br>    . /usr/lib/os-release<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> ! [[ <span class="hljs-variable">$PRETTY_NAME</span> ]]; <span class="hljs-keyword">then</span><br>    PRETTY_NAME=<span class="hljs-string">&quot;Linux <span class="hljs-variable">$KERNEL_VERSION</span>&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [[ -f /etc/kernel/cmdline ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">read</span> -r -d <span class="hljs-string">&#x27;&#x27;</span> -a BOOT_OPTIONS &lt; /etc/kernel/cmdline<br><span class="hljs-keyword">elif</span> [[ -f /usr/lib/kernel/cmdline ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">read</span> -r -d <span class="hljs-string">&#x27;&#x27;</span> -a BOOT_OPTIONS &lt; /usr/lib/kernel/cmdline<br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">declare</span> -a BOOT_OPTIONS<br><br>    <span class="hljs-built_in">read</span> -r -d <span class="hljs-string">&#x27;&#x27;</span> -a line &lt; /proc/cmdline<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;line[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span><br>        [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;i#initrd=*&#125;</span>&quot;</span> != <span class="hljs-string">&quot;<span class="hljs-variable">$i</span>&quot;</span> ]] &amp;&amp; <span class="hljs-built_in">continue</span><br>        [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;i#BOOT_IMAGE=*&#125;</span>&quot;</span> != <span class="hljs-string">&quot;<span class="hljs-variable">$i</span>&quot;</span> ]] &amp;&amp; <span class="hljs-built_in">continue</span><br>        BOOT_OPTIONS+=(<span class="hljs-string">&quot;<span class="hljs-variable">$i</span>&quot;</span>)<br>    <span class="hljs-keyword">done</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [[ -f /etc/kernel/tries ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">read</span> -r TRIES &lt;/etc/kernel/tries<br>    <span class="hljs-keyword">if</span> ! [[ <span class="hljs-string">&quot;<span class="hljs-variable">$TRIES</span>&quot;</span> =~ ^[0-9]+$ ]] ; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/etc/kernel/tries does not contain an integer.&quot;</span> &gt;&amp;2<br>        <span class="hljs-built_in">exit</span> 1<br>    <span class="hljs-keyword">fi</span><br>    LOADER_ENTRY=<span class="hljs-string">&quot;<span class="hljs-variable">$BOOT_ROOT</span>/EFI/Linux/<span class="hljs-variable">$KERNEL_VERSION</span>-<span class="hljs-variable">$MACHINE_ID</span>+<span class="hljs-variable">$TRIES</span>.efi&quot;</span><br><span class="hljs-keyword">else</span><br>    LOADER_ENTRY=<span class="hljs-string">&quot;<span class="hljs-variable">$BOOT_ROOT</span>/EFI/Linux/<span class="hljs-variable">$KERNEL_VERSION</span>-<span class="hljs-variable">$MACHINE_ID</span>.efi&quot;</span><br><span class="hljs-keyword">fi</span><br><br>mkdir -p <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;LOADER_ENTRY%/*&#125;</span>&quot;</span> || &#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Could not create loader entry directory &#x27;<span class="hljs-variable">$&#123;LOADER_ENTRY%/*&#125;</span>&#x27;.&quot;</span> &gt;&amp;2<br>    <span class="hljs-built_in">exit</span> 1<br>&#125;<br><br>[ <span class="hljs-string">&quot;<span class="hljs-variable">$KERNEL_INSTALL_VERBOSE</span>&quot;</span> -gt 0 ] &amp;&amp; \<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Creating <span class="hljs-variable">$LOADER_ENTRY</span>&quot;</span><br>&#123;<br><span class="hljs-built_in">unset</span> noimageifnotneeded<br><span class="hljs-keyword">for</span> ((i=0; i &lt; <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#BOOT_OPTIONS[@]&#125;</span>&quot;</span>; i++)); <span class="hljs-keyword">do</span><br><span class="hljs-comment"># shellcheck disable=SC1001</span><br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$&#123;BOOT_OPTIONS[$i]&#125;</span> == root\=PARTUUID\=* ]]; <span class="hljs-keyword">then</span><br>noimageifnotneeded=<span class="hljs-string">&quot;yes&quot;</span><br><span class="hljs-built_in">break</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br>dracut --kernel-cmdline <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;BOOT_OPTIONS[*]&#125;</span>&quot;</span> -f <span class="hljs-variable">$&#123;noimageifnotneeded:+--noimageifnotneeded&#125;</span> --uefi <span class="hljs-string">&quot;<span class="hljs-variable">$LOADER_ENTRY</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$KERNEL_VERSION</span>&quot;</span><br>&#125;<br><span class="hljs-built_in">exit</span> 0<br></code></pre></div></td></tr></table></figure></p><p>The <code>dracut --kernel-cmdline "$&#123;BOOT_OPTIONS[*]&#125;" -f $&#123;noimageifnotneeded:+--noimageifnotneeded&#125; --uefi "$LOADER_ENTRY" "$KERNEL_VERSION"</code> does the magic to enable Unified Kernel Image.</p><h3 id="change-generation-of-rescue-image">Change generation of rescue image</h3><p>Create file at <code>/etc/kernel/install.d/51-dracut-rescue.install</code> with contents <a href="https://gist.github.com/karuboniru/2e6fb6dc48094a7bbd9671da42a83960">here</a>, this is for building rescue entry in unified way. <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash"><span class="hljs-meta">#!/usr/bin/bash</span><br><br><span class="hljs-built_in">export</span> LANG=C<br><br>COMMAND=<span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span><br>KERNEL_VERSION=<span class="hljs-string">&quot;<span class="hljs-variable">$2</span>&quot;</span><br>ENTRY_DIR_ABS=<span class="hljs-string">&quot;<span class="hljs-variable">$3</span>&quot;</span><br>KERNEL_IMAGE=<span class="hljs-string">&quot;<span class="hljs-variable">$4</span>&quot;</span><br><br><br>dropindirs_sort()<br>&#123;<br>    suffix=<span class="hljs-variable">$1</span>; <span class="hljs-built_in">shift</span><br>    args=(<span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span>)<br>    files=$(<br>        <span class="hljs-keyword">while</span> (( <span class="hljs-variable">$#</span> &gt; 0 )); <span class="hljs-keyword">do</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1&#125;</span>&quot;</span>/*<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;suffix&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span><br>                [[ -f <span class="hljs-variable">$i</span> ]] &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;i##*/&#125;</span>&quot;</span><br>            <span class="hljs-keyword">done</span><br>            <span class="hljs-built_in">shift</span><br>        <span class="hljs-keyword">done</span> | sort -Vu<br>    )<br><br>    <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> <span class="hljs-variable">$files</span>; <span class="hljs-keyword">do</span><br>        <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;args[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span><br>            <span class="hljs-keyword">if</span> [[ -f <span class="hljs-string">&quot;<span class="hljs-variable">$d</span>/<span class="hljs-variable">$f</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$d</span>/<span class="hljs-variable">$f</span>&quot;</span><br>                <span class="hljs-built_in">continue</span> 2<br>            <span class="hljs-keyword">fi</span><br>        <span class="hljs-keyword">done</span><br>    <span class="hljs-keyword">done</span><br>&#125;<br><br>[[ -f /etc/os-release ]] &amp;&amp; . /etc/os-release<br><br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$&#123;KERNEL_INSTALL_MACHINE_ID+x&#125;</span> ]]; <span class="hljs-keyword">then</span><br>    MACHINE_ID=<span class="hljs-variable">$KERNEL_INSTALL_MACHINE_ID</span><br><span class="hljs-keyword">elif</span> [[ -f /etc/machine-id ]] ; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">read</span> -r MACHINE_ID &lt; /etc/machine-id<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> ! [[ <span class="hljs-variable">$MACHINE_ID</span> ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [[ -f /etc/kernel/cmdline ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">read</span> -r -d <span class="hljs-string">&#x27;&#x27;</span> -a BOOT_OPTIONS &lt; /etc/kernel/cmdline<br><span class="hljs-keyword">elif</span> [[ -f /usr/lib/kernel/cmdline ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">read</span> -r -d <span class="hljs-string">&#x27;&#x27;</span> -a BOOT_OPTIONS &lt; /usr/lib/kernel/cmdline<br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">declare</span> -a BOOT_OPTIONS<br><br>    <span class="hljs-built_in">read</span> -r -d <span class="hljs-string">&#x27;&#x27;</span> -a line &lt; /proc/cmdline<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;line[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span><br>        [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;i#initrd=*&#125;</span>&quot;</span> != <span class="hljs-string">&quot;<span class="hljs-variable">$i</span>&quot;</span> ]] &amp;&amp; <span class="hljs-built_in">continue</span><br>        BOOT_OPTIONS+=(<span class="hljs-string">&quot;<span class="hljs-variable">$i</span>&quot;</span>)<br>    <span class="hljs-keyword">done</span><br><span class="hljs-keyword">fi</span><br>BOOT_ROOT=<span class="hljs-variable">$&#123;ENTRY_DIR_ABS%/$MACHINE_ID/$KERNEL_VERSION&#125;</span><br>LOADER_ENTRY=<span class="hljs-string">&quot;<span class="hljs-variable">$BOOT_ROOT</span>/EFI/Linux/0-rescue-<span class="hljs-variable">$MACHINE_ID</span>.efi&quot;</span><br>BOOT_DIR_ABS=<span class="hljs-string">&quot;<span class="hljs-variable">$BOOT_ROOT</span>/EFI/Linux&quot;</span><br>ret=0<br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$COMMAND</span>&quot;</span> <span class="hljs-keyword">in</span><br>    add)<br>        [[ -f <span class="hljs-string">&quot;<span class="hljs-variable">$LOADER_ENTRY</span>&quot;</span> ]] &amp;&amp; <span class="hljs-built_in">exit</span> 0<br><br>        <span class="hljs-comment"># source our config dir</span><br>        <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> $(dropindirs_sort <span class="hljs-string">&quot;.conf&quot;</span> <span class="hljs-string">&quot;/etc/dracut.conf.d&quot;</span> <span class="hljs-string">&quot;/usr/lib/dracut/dracut.conf.d&quot;</span>); <span class="hljs-keyword">do</span><br>            <span class="hljs-keyword">if</span> [[ -e <span class="hljs-variable">$f</span> ]]; <span class="hljs-keyword">then</span><br>                <span class="hljs-comment"># shellcheck disable=SC1090</span><br>                . <span class="hljs-string">&quot;<span class="hljs-variable">$f</span>&quot;</span><br>            <span class="hljs-keyword">fi</span><br>        <span class="hljs-keyword">done</span><br><br>        <span class="hljs-comment"># shellcheck disable=SC2154</span><br>        [[ <span class="hljs-variable">$dracut_rescue_image</span> != <span class="hljs-string">&quot;yes&quot;</span> ]] &amp;&amp; <span class="hljs-built_in">exit</span> 0<br><br>        [[ -d <span class="hljs-string">&quot;<span class="hljs-variable">$BOOT_DIR_ABS</span>&quot;</span> ]] || mkdir -p <span class="hljs-string">&quot;<span class="hljs-variable">$BOOT_DIR_ABS</span>&quot;</span><br><br>        dracut --kernel-cmdline <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;BOOT_OPTIONS[*]&#125;</span>&quot;</span> -f --no-hostonly -a <span class="hljs-string">&quot;rescue&quot;</span> --uefi <span class="hljs-string">&quot;<span class="hljs-variable">$LOADER_ENTRY</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$KERNEL_VERSION</span>&quot;</span><br><br>        ((ret+=$?))<br>        ;;<br><br>    remove)<br>        <span class="hljs-built_in">exit</span> 0<br>        ;;<br><br>    *)<br>        usage<br>        ret=1;;<br><span class="hljs-keyword">esac</span><br><br><span class="hljs-built_in">exit</span> <span class="hljs-variable">$ret</span><br></code></pre></div></td></tr></table></figure></p><h2 id="reinstall-kernel-core">Reinstall kernel-core</h2><p>Reinstall your kernel image to make changes apply: <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">sudo dnf install binutils <span class="hljs-comment"># needed by dracut to build kernel image</span><br>sudo dnf reinstall $(rpm -qa|grep kernel-core)<br></code></pre></div></td></tr></table></figure></p><p>You should be able to see several <code>.efi</code> kernel image at <code>/efi/EFI/Linux</code>, if it's not there, rollback with your backup. Now you can reboot to see if everything works.</p><h2 id="update-systemd-boot-on-demand">Update systemd-boot on demand</h2><p>Install plugins to run scripts for dnf: <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">python3-dnf-plugin-post-transaction-actions<br></code></pre></div></td></tr></table></figure></p><p>Create file <code>/etc/dnf/plugins/post-transaction-actions.d/systemd-udev.action</code> <figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">systemd-udev</span><span class="hljs-selector-pseudo">:in</span><span class="hljs-selector-pseudo">:bootctl</span> <span class="hljs-selector-tag">update</span><br></code></pre></div></td></tr></table></figure> This will enable systemd-boot in efi to update along with systemd package.</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>莽一把，升级 Fedora 34</title>
    <link href="https://yanqiyu.info/2021/03/15/yolo-fedora34/"/>
    <id>https://yanqiyu.info/2021/03/15/yolo-fedora34/</id>
    <published>2021-03-15T03:16:54.000Z</published>
    <updated>2021-03-15T03:16:54.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-danger">            <p>Fedora 34 （在 2021 年 3 月 15 日）还处于 Prerelease 状态，虽然我使用过程没遇到严重问题，但是不建议新手盲目上测试版。</p>          </div><p>在邮件列表看了下 Fedora 34 的 <a href="https://qa.fedoraproject.org/blockerbugs/milestone/34/beta/buglist">blocker bugs</a> 状态，感觉严重的问题基本上已经被解决了。加上现在我的机器有牛逼闪闪的 Btrfs 加成，再大的翻车都能回滚快照。于是决定莽一把，升级 Fedora 34。</p><h2 id="总之先搞一个快照">总之先搞一个快照</h2><p>顺便把快照传出去： <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">sudo btrfs sub snap -r / /.snapshot/fedora-33<br>sudo btrfs send /.snapshot/fedora-33 | pigz --best &gt; /any/path/fedora-33.btrfs.gz<br></code></pre></div></td></tr></table></figure></p><h2 id="众所周知的升级过程">众所周知的升级过程</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">sudo dnf system-upgrade download --refresh --releasever=34<br>sudo dnf system-upgrade reboot<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/karuboniru/blog_imgs@master/20210315113127.png" alt="超级多的包" /> 平平稳稳的重启，祈祷不要翻车。</p><h2 id="使用-gnome-40-是一种怎样的体验">使用 Gnome 40 是一种怎样的体验</h2><p>说实话，第一眼看到 Gnome 40 的时候还是很喜欢这个设计的， <img src="https://cdn.jsdelivr.net/gh/karuboniru/blog_imgs@master/20210315113321.png" /> 虽然比较浪费纵向空间，但是好看啊。</p><p>并且登陆就进入这个界面，比登陆就面对空无一物的桌面要好多了。</p><p>还有一个没怎么被翻译的 Tour 应用，设置翻译也缺一些火候。想必是 Beta 版本的原因吧。 <div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/karuboniru/blog_imgs@master/20210315113443.png" /></div><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/karuboniru/blog_imgs@master/20210315113609.png" /></div></div></div></p><h2 id="蹬蹬咚">蹬蹬咚</h2><p>一切都是好的...直到我开始准备在 Telegram 吹水...</p><p>发现我的输入法 Panel 变回了 Fcitx5 的界面（而不是 kimpanel 的界面）。于是赶紧检查 Gnome 插件状态： <img src="https://cdn.jsdelivr.net/gh/karuboniru/blog_imgs@master/20210315114401.jpg" alt="痛苦面具" /></p><p>好家伙，我的插件全部炸了。</p><p>我真傻，真的，我单知道 <span class="citation" data-cites="Sumomogal">@Sumomogal</span> 说的 <a href="https://twitter.com/Sumomogal/status/1370576849084899331?s=20">Gnome 会炸插件</a>，却不知道会炸掉我的全家身当。</p><p>救火要紧，赶紧去骚扰老K。</p><p>老K<a href="https://github.com/wengxt/gnome-shell-extension-kimpanel/commit/f0afbfe17ab421841a15eb8d0761d9105686b7f1">瞬间修好了扩展</a>，总算是能愉快的打字了。但愿别的插件能早日复活...</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="瞎折腾" scheme="https://yanqiyu.info/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="瞎折腾" scheme="https://yanqiyu.info/tags/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>我是来吹 Cloudflare Pages 的</title>
    <link href="https://yanqiyu.info/2021/03/06/cloudflare-pages/"/>
    <id>https://yanqiyu.info/2021/03/06/cloudflare-pages/</id>
    <published>2021-03-06T03:53:53.000Z</published>
    <updated>2021-03-06T03:53:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="迁移博客到-cloudflare-pages">迁移博客到 Cloudflare Pages</h2><blockquote><p>薅羊毛，就要薅到底</p></blockquote><p><a href="https://pages.dev/"><img src="https://cdn.jsdelivr.net/gh/karuboniru/blog_imgs@master/20210306115901.png" alt="Cloudflare 介绍页面" /></a></p><p>突然发现 Cloudflare 的新静态网页托管服务结束了内测，变得可用。考虑到现在站点是 Github Pages + Cloudflare CDN 搭建，于是干脆一不做二不休换成 Cloudflare Pages 算了。 <del>没有中间商赚差价</del> 我也不用粗暴的在每次 GitHub Actions 之后做一次缓存清除（以免 Cloudflare 缓存了旧的页面而没有及时更新）。</p><p>切换到 Cloudflare Pages 整体上很容易，在 <a href="https://pages.dev/">Pages</a> 页面点击那个大大的黄色的 Get Started 按钮，按照指引授权 GitHub 权限、选择构建使用的仓库、最后设置构建的命令就完成了迁移... 好吧，这是最简单的情况，适用于你的站点只需要最简单的命令即可构建时，例如下表中的框架：</p><center><table><thead><tr class="header"><th>框架</th><th>构建命令</th><th>输出目录</th></tr></thead><tbody><tr class="odd"><td>Angular (Angular CLI)</td><td><code>ng build</code></td><td><code>dist</code></td></tr><tr class="even"><td>Brunch</td><td><code>brunch build --production</code></td><td><code>public</code></td></tr><tr class="odd"><td>Docusaurus</td><td><code>npm run build</code></td><td><code>build</code></td></tr><tr class="even"><td>Eleventy</td><td><code>eleventy</code></td><td><code>_site</code></td></tr><tr class="odd"><td>Ember.js</td><td><code>ember build</code></td><td><code>dist</code></td></tr><tr class="even"><td>Gatsby</td><td><code>gatsby build</code></td><td><code>public</code></td></tr><tr class="odd"><td>GitBook</td><td><code>gitbook build</code></td><td><code>_book</code></td></tr><tr class="even"><td>Gridsome</td><td><code>gridsome build</code></td><td><code>dist</code></td></tr><tr class="odd"><td>Hugo</td><td><code>hugo</code></td><td><code>public</code></td></tr><tr class="even"><td>Jekyll</td><td><code>jekyll build</code></td><td><code>_site</code></td></tr><tr class="odd"><td>Mkdocs</td><td><code>mkdocs build</code></td><td><code>site</code></td></tr><tr class="even"><td>Next.js (Static HTML Export)</td><td><code>next build &amp;&amp; next export</code></td><td><code>out</code></td></tr><tr class="odd"><td>Nuxt.js</td><td><code>nuxt generate</code></td><td><code>dist</code></td></tr><tr class="even"><td>Pelican</td><td><code>pelican $content [-s settings.py]</code></td><td><code>output</code></td></tr><tr class="odd"><td>React (create-react-app)</td><td><code>npm run build</code></td><td><code>build</code></td></tr><tr class="even"><td>React Static</td><td><code>react-static build</code></td><td><code>dist</code></td></tr><tr class="odd"><td>Slate</td><td><code>./deploy.sh</code></td><td><code>build</code></td></tr><tr class="even"><td>Svelte</td><td><code>npm run build</code></td><td><code>public</code></td></tr><tr class="odd"><td>Umi</td><td><code>umi build</code></td><td><code>dist</code></td></tr><tr class="even"><td>Vue</td><td><code>npm run build</code></td><td><code>public</code></td></tr><tr class="odd"><td>VuePress</td><td><code>vuepress build $directory</code></td><td><code>$directory/.vuepress/dist</code></td></tr></tbody></table></center><h3 id="我想要运行自定义脚本">我想要运行自定义脚本！</h3><p>那你就放一个<a href="https://github.com/karuboniru/blog_ci/blob/master/build.sh">自定义脚本</a>在你的仓库里面呗。构建命令就是 <code>./build.sh</code>, 记得加上 <code>+x</code> 权限。</p><h2 id="相对于使用-github-actions-部署有什么好处坏处">相对于使用 GitHub Actions 部署有什么好处/坏处？</h2><p>一方面 GitHub Actions 更快，Cloudflare Pages 的服务有时候会莫名其妙的卡几分钟到几十分钟在 <code>正在初始化构建环境</code> 阶段。但是 Cloudflare Pages 能优雅的处理 Pull Request 并且提供预览页面。</p><p>总之 Cloudflare 家大业大，并且是专门做网络服务的，做网页托管 <strong>应该</strong> 不会太菜吧。</p><p>另外 Cloudflare 的那个 Proxy 对于他们自己托管的页面不好使，可以看 <a href="https://discord.com/channels/595317990191398933/789155108529111069/817438688555827280">discord 聊天记录</a>，但是之后会修。还有些别的可能的坑可以看看 <a href="https://developers.cloudflare.com/pages/platform/known-issues">已知问题</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="瞎折腾" scheme="https://yanqiyu.info/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="瞎折腾" scheme="https://yanqiyu.info/tags/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>如何更加优雅的在 fedora 上安装 fcitx5</title>
    <link href="https://yanqiyu.info/2020/11/06/fcitx5-fedora-updated/"/>
    <id>https://yanqiyu.info/2020/11/06/fcitx5-fedora-updated/</id>
    <published>2020-11-06T08:41:10.000Z</published>
    <updated>2020-11-06T08:41:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>感谢囧脸的努力，fcitx5 也进入了正式 release 的阶段。当然，Fedora 官方源里面的 fcitx5 也即将切换到 release 版本。相对于之前的版本，有些信息需要相应的更新，于是有了这篇文章。</p><p>新版本的 fcitx5 及其组件在现在（写文章时）还在 test 仓库，想要安装的可以从中安装尝试，升级方法见 <a href="https://bodhi.fedoraproject.org/updates/FEDORA-2020-127a30ec63">bodhi</a>。</p><h3 id="对应升级用户变更如下">对应升级用户，变更如下：</h3><ul><li>如果你是使用 imsettings 设置输入法或者是通过 alternatives 设置输入法的，那么你不会感知到变化。</li><li>如果你是通过符号链接 <code>ln -s /usr/share/applications/fcitx5.desktop ~/.config/autostart/</code> 设置输入法的，那么自动启动会挂掉，你需要删除原来的符号链接并 <code>ln -s /usr/share/applications/org.fcitx.Fcitx5.desktop ~/.config/autostart/</code> 重新创建</li><li>如果你是 <code>cp /usr/share/applications/fcitx5.desktop ~/.config/autostart/</code> 设置的自动启动的话，你应该不会感知到变化，但是我建议你删除旧的文件重新拷贝一个新的。</li><li>无论如何，你都可以放弃原来的自动启动和环境变量，安装 fcitx5-autostart 软件包</li></ul><h3 id="对应新安装的用户相对于之前的文章而言变化如下">对应新安装的用户，相对于之前的文章而言，变化如下：</h3><ul><li>如果 alternative 或者 imsettings 对于你来说有效，那么用它就好，具体可以参见 <a href="/2020/08/30/fcitx5-fedora/" title="前文">前文</a></li><li>反之，你可以安装 fcitx5-autostart, 它应该能完成自动启动以及配置环境变量</li><li>要是不幸，还是遇到了问题，请在 <a href="https://t.me/fedorazh">群聊</a> 或者 <a href="https://bugzilla.redhat.com/buglist.cgi?bug_status=NEW&amp;bug_status=ASSIGNED&amp;classification=Fedora&amp;product=Fedora&amp;product=Fedora%20EPEL&amp;component=fcitx5">bugzilla</a> 反馈并寻求解决方案</li></ul><p>如果你只希望 per user 的配置而非类似于 fcitx5-autostart 那样针对所有用户，那么可以参见 <a href="/2020/08/30/fcitx5-fedora/" title="前文">前文</a>，不过相应的把 <code>/usr/share/applications/fcitx5.desktop</code> 换成 <code>/usr/share/applications/org.fcitx.Fcitx5.desktop</code> 即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="打包" scheme="https://yanqiyu.info/categories/%E6%89%93%E5%8C%85/"/>
    
    
  </entry>
  
  <entry>
    <title>轻松的安装 Geant4</title>
    <link href="https://yanqiyu.info/2020/09/26/geant4-basic/"/>
    <id>https://yanqiyu.info/2020/09/26/geant4-basic/</id>
    <published>2020-09-26T03:23:37.000Z</published>
    <updated>2020-09-26T03:23:37.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>本文主要是给组里面的同学们快速配置自己的 Geant 4 之用</p>          </div><div class="note note-info">            <p>本文使用 Fedora 操作系统（或者是其 WSL remix）</p>          </div><div class="note note-info">            <p>如果你是高贵的 Arch 用户，AUR 里面貌似有现成的 Geant 4, 也是开箱即用的，但是 Arch 用户大概不需要这篇文章</p>          </div><h2 id="在-wsl-中配置你的-fedora-环境">在 WSL 中配置你的 Fedora 环境</h2><p>对于原生 Linux 用户，请忽略这一节。</p><h3 id="启用-wsl-与安装-linux">启用 WSL 与安装 Linux</h3><p>请参阅<a href="https://zhuanlan.zhihu.com/p/35801201">这篇文章</a>的“为 WSL 做准备”章节，启用你的 Windows 下的 WSL。然后在<a href="https://github.com/WhitewaterFoundry/Fedora-Remix-for-WSL/releases/tag/31.5.0">Fedora Remix for WSL 发表页面</a>下载那个<code>appxbundle</code>文件，双击安装这个软件包，然后打开安装的程序，按照提示进行设置用户名以及密码。</p><h3 id="安装-xserver">安装 XServer</h3><p>为了能正确使用 ROOT/Geant4 的图形界面，你需要安装 XServer。在<a href="https://sourceforge.net/projects/vcxsrv/">这里</a>下载，安装后启动，全部选择默认配置即可。</p><p>然后在 WSL 中运行 <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export DISPLAY=127.0.0.1:0&#x27;</span> &gt;&gt; ~/.bashrc<br></code></pre></div></td></tr></table></figure></p><h3 id="伪装-release-信息">伪装 release 信息</h3><p>运行 <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">sudo dnf install fedora-release --allowerasing <br></code></pre></div></td></tr></table></figure></p><p>WSL 配置至此结束，接下来是安装 Geant 4 以及 ROOT。</p><h2 id="安装-geant-4">安装 Geant 4</h2><p>运行 <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">sudo dnf copr <span class="hljs-built_in">enable</span> yanqiyu/geant4<br>sudo dnf install geant4 geant4-data geant4-devel geant4-examples<br></code></pre></div></td></tr></table></figure> 就完成了安装。</p><h3 id="编译安装">编译安装</h3><div class="note note-warning">            <p>我不怎么建议自己编译安装，因为编译慢，安装的位置不好还需要手动设置一下环境变量</p>          </div><p>下载 Geant 4 的源代码，然后解压 <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">mkdir build &amp;&amp; <span class="hljs-built_in">cd</span> build<br>cmake    -DGEANT4_BUILD_MULTITHREADED=ON \<br>         -DGEANT4_INSTALL_DATA=ON \<br>         -DGEANT4_USE_GDML=ON \<br>         -DGEANT4_USE_G3TOG4=ON \<br>         -DGEANT4_USE_QT=ON \<br>         -DOpenGL_GL_PREFERENCE=GLVND \<br>         -DGEANT4_USE_XM=ON \<br>         -DGEANT4_USE_OPENGL_X11=ON \<br>         -DGEANT4_USE_INVENTOR=OFF \<br>         -DGEANT4_USE_RAYTRACER_X11=ON \<br>         -DGEANT4_USE_SYSTEM_CLHEP=OFF \<br>         -DGEANT4_USE_SYSTEM_EXPAT=ON \<br>         -DGEANT4_USE_SYSTEM_ZLIB=ON \<br>         ..<br>make -jN（N 替换为你的 CPU 线程数）<br>make install<br></code></pre></div></td></tr></table></figure> 要是提示缺依赖就照着提示找依赖安装。</p><p>自己编译安装的版本需要运行：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /path/to/geant4.sh<br></code></pre></div></td></tr></table></figure><p>来设置环境变量，通过源安装的不需要。</p><h2 id="安装-root">安装 ROOT</h2><p>在多数情况下，可以通过安装 <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">sudo dnf install root-hist-painter root-physics root-mathmore root-tree-dataframe root-hist root-spectrum root-net root-tree-ntuple root-graf-x11 root-graf3d root-vecops root-matrix root root-multiproc root-icons root-tree root-graf-postscript root-gui root-graf-gpad root-tree-player root-cling root-minuit root-fonts root-graf-asimage root-graf root-core root-mathcore root-io root-gui-ged<br></code></pre></div></td></tr></table></figure> 就足以支撑大部分 Geant4 开发之用，要是 <code>cmake</code> 的时候提示缺文件就再安装就行。</p><h2 id="基本程序框架">基本程序框架</h2><ul><li><code>physicsList</code>, 一般是 <code>G4VModularPhysicsList</code> 以及其派生的预定义物理类型, 这个类负责定义模拟中的物理过程;</li><li><code>DetectorConstruction</code>, 派生自<code>G4VUserDetectorConstruction</code> 负责构建探测器的几何结构以及材料;</li><li><code>ActionInitialization</code> 派生自 <code>G4VUserActionInitialization</code>, 主要工作是对于模拟进行准备操作, 通过 <code>SetUserAction</code> 来实现注册各个其他运行相关的类, 在简单的程序中包括 <code>RunAction</code>, <code>EventAction</code>, <code>SteppingAction</code>, <code>PrimaryGeneratorAction</code> , 如果需要保存直方图的话就要加上 <code>HistoManager</code> ;</li><li><code>RunAction</code> 派生自 <code>G4UserRunAction</code>, 这个类定义了每个 run 的操作;</li><li><code>PrimaryGeneratorAction</code> , 派生自 <code>G4VUserPrimaryGeneratorAction</code> , 也就送描述粒子源的行为;</li><li><code>EventAction</code> 派生自 <code>G4UserEventAction</code>, 描述的是一个模拟的 Event 的过程, 一般处理的事情是按照设计统计每个 Step 中物理过程的能量沉积等数据, 并填充 tuple;</li><li><code>SteppingAction</code> 派生自 <code>G4UserSteppingAction</code>, 处理模拟过程每个 step, 每个 step 中 <code>UserSteppingAction</code> 都会被调用, 并传入一个 <code>G4Step</code> 参数, 可以获取这个 step 中的物理过程.</li><li><code>HistoManager</code>, 它一般是负责保存直方图到 <code>ROOT</code> 文件以供进一步操作的;</li><li>对于一些类来说, 还可以有它的 <code>messenger</code> 用于处理命令.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="物理" scheme="https://yanqiyu.info/categories/%E7%89%A9%E7%90%86/"/>
    
    
      <category term="Geant 4" scheme="https://yanqiyu.info/tags/Geant-4/"/>
    
  </entry>
  
  <entry>
    <title>如何下周就在 Fedora 32 用上 Fcitx 5</title>
    <link href="https://yanqiyu.info/2020/08/30/fcitx5-fedora/"/>
    <id>https://yanqiyu.info/2020/08/30/fcitx5-fedora/</id>
    <published>2020-08-30T09:44:07.000Z</published>
    <updated>2020-11-06T08:41:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文内容已经严重过时，请参阅 <a href="/2020/11/06/fcitx5-fedora-updated/" title="这篇更新的文章">这篇更新的文章</a> 设置你的 fcitx5</p><hr /><p>一开始想了想要不要在标题写 Fedora，觉得还是必要的。因为目前只有 Arch Linux （和 Debian 和 Ubuntu）出于套近乎的关系有了 Fcitx 5 全家桶。</p><p>为什么是下周？——因为 Fedora 的 QA，<strong>包最长会在 <a href="https://bodhi.fedoraproject.org/updates/FEDORA-2020-5465c02630">Bodhi</a> 等一周，除非你们帮忙测试，点个 upvote</strong> (๑•̀ㅂ•́)و✧。</p><p>测试大概明天或者后天上线，想要参与就<code>dnf install --enablerepo=updates-testing</code>来进行安装。</p><hr /><h2 id="建议安装的包">建议安装的包</h2><ul><li>fcitx5<br /></li><li>fcitx5-gtk</li><li>fcitx5-qt</li><li>fcitx5-configtool<br /></li><li>fcitx5-chinese-addons</li></ul><p>另外之前用了我的 <a href="https://copr.fedorainfracloud.org/coprs/yanqiyu/fcitx5">copr</a> 版本的人，请保证把里面的包卸载之后在进行安装，否则可能出现奇妙的冲突。</p><p>虽然在别的发行版上面最新的 Fcitx 4/5 不能共存，但是在 Fedora 上能，rpm 能优雅的处理表面上的文件冲突。 对于原因感兴趣的可见<a href="https://t.me/fedorazh/63996">群里面的讨论</a>的上下文。</p><h2 id="环境变量和自启动">环境变量和自启动</h2><h3 id="对于-kde-用户">对于 KDE 用户</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">$ sudo alternatives --config xinputrc<br></code></pre></div></td></tr></table></figure><p>即可修改全局输入法配置。但是想要修改自己的输入法配置可以考虑 im-settings 或者下面的方法。</p><h3 id="通用办法">通用办法</h3><p>写一个 <figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">INPUT_METHOD</span>=fcitx5<br><span class="hljs-attr">GTK_IM_MODULE</span>=fcitx5<br><span class="hljs-attr">QT_IM_MODULE</span>=fcitx5<br><span class="hljs-attr">XMODIFIERS</span>=@im=fcitx5<br></code></pre></div></td></tr></table></figure> 放到 <code>~/.config/environment.d/00-fcitx5.conf</code></p><p>然后运行（当然 <code>ln -s</code> 可以换成 <code>cp</code>） <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">$ ln -s /usr/share/applications/fcitx5.desktop ~/.config/autostart/<br></code></pre></div></td></tr></table></figure> 同样<strong>注销之后重新登陆</strong>就会生效。</p><p>别的情况可以酌情尝试上述两种办法，应该至少有一种会生效。</p><h2 id="一些其他的提示">一些其他的提示</h2><h3 id="对于-gnome-用户">对于 Gnome 用户</h3><p>见 <a href="https://plumz.me/archives/11740/">李先生的博客</a> 文章，建议安装 <strong>kimpanel</strong> 插件以改善体验。(以下引用 block 是直接厚颜无耻照抄的, 意味着内容可能过时，没准 Gnome 商店的版本也超级好使呢？)</p><blockquote><p>众所周知，网络上吹 Fcitx 5 的用户大多数都是 Arch Linux 用户、而且用的都是 KDE，没有人告诉你 Gnome-shell 要怎么办，不过万幸的是伟大的囧脸的 Gnome shell 插件是支持 Fcitx 5 的，因为用的都是 Kimpanel，也就是说，装了这个 Gnome-shell extension，无论你是 Fcitx 4 还是 Fcitx 5，都是可以用的，赞美囧脸！ 不过这个插件在 Gnome 官方的 Extension 网站上的版本有一些问题：</p><ul><li><a href="https://github.com/wengxt/gnome-shell-extension-kimpanel/issues/46">快速打字的时候会出现部分内容显示不全</a></li><li>多显示器的时候会跨越显示器出现选字框</li><li><a href="https://github.com/wengxt/gnome-shell-extension-kimpanel/issues/47">锁屏后解锁会出现两个 Indicator</a></li></ul><p>不过这三个问题都已经被囧脸修复了，赞美囧脸！</p><p>安装的话还是推荐安装 git 的版本，因为官方的还没有更新： <figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/wengxt/g</span>nome-shell-extension-kimpanel<br></code></pre></div></td></tr></table></figure> 安装依赖：gettext cmake 后直接在目录下运行 ./install.sh 就可以了，记得把原本的插件删掉再装。</p></blockquote><h3 id="图形界面配置工具">图形界面配置工具</h3><p><code>fcitx5-configtool</code> 含有 <code>fcitx5-config-qt</code>，安装之后<code>fcitx5-config</code>就会调用之。另外还支持KCM配置，当然是KDE用户专享了。</p><h2 id="bug-report">Bug Report</h2><p>遇到问题，建议先在<a href="https://bugzilla.redhat.com/buglist.cgi?bug_status=NEW&amp;bug_status=ASSIGNED&amp;classification=Fedora&amp;component=fcitx5&amp;list_id=11319828&amp;product=Fedora&amp;product=Fedora%20EPEL">Bugzilla</a>反馈，如果是我的锅（打包翻车），我就修。如果是囧脸的锅，那我就找囧脸修。</p><p>当然要是你能判断是囧脸的锅，建议直接去上游找囧脸修。</p><h2 id="todo-list">TODO List</h2><ul><li>            <input type="checkbox" disabled checked="checked">fcitx5-configtool 拆包          ，把 <code>kcm-fcitx5</code> 拆出来: <strong>已经在 rawhide 中完成，F32 再等等就 push</strong></li><li><input type="checkbox" disabled >fcitx5-chinese-addons 拆包</li><li><input type="checkbox" disabled ><del>Fedora 31 上的编译</del>, 不会有了, 因为貌似 fmt 版本太老, 编译不过, 这个包 F31 Mass Rebuild 之后居然就没更新过. 虽然我可以 Bundle 一个 header-only 的 fmt.</li></ul><p><em>为什么现在不做，这些事情不复杂啊？</em> ——懒，但是要是你确实需要，<a href="mailto:yanqiyu@fedoraproject.org">给我说一声</a>，我尽快😂</p><h2 id="此处应该感谢囧脸">此处应该感谢<a href="https://www.csslayer.info/">囧脸</a></h2><p>CSSlayer（囧脸）对于打包做出了巨大贡献，包括但不限于：</p><ul><li>舍去刷蹦蹦蹦的时间深夜来修 aarch64 上的 bug</li><li>帮我识别出一个 s390x 上的错误的真正原因，还给 KenLM 提了 PR，修复了十有八九不会有活人遇到的 s390x 上的一个可能导致整个 chinese-addons 不好使的 bug</li></ul><hr /><p>最后高呼三遍：<strong>赞美囧脸！赞美囧脸！赞美囧脸！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="打包" scheme="https://yanqiyu.info/categories/%E6%89%93%E5%8C%85/"/>
    
    
  </entry>
  
  <entry>
    <title>在 Hyper-V 会话中对于 Fedora 启用增强会话</title>
    <link href="https://yanqiyu.info/2020/08/22/enhanced-hyperv-for-fedora/"/>
    <id>https://yanqiyu.info/2020/08/22/enhanced-hyperv-for-fedora/</id>
    <published>2020-08-22T02:31:03.000Z</published>
    <updated>2020-08-22T02:31:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hyper-v-的图形界面搞得老百姓怨声载道">Hyper-V 的图形界面搞得老百姓怨声载道</h2><ul><li>卡出翔</li><li>分辨率最高 <code>1080x1920</code></li><li>剪切板共享没有</li></ul><h2 id="tldr-使用增强模式">TL;DR, 使用增强模式</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">$ git <span class="hljs-built_in">clone</span> https://github.com/karuboniru/linux-vm-tools.git<br>$ <span class="hljs-built_in">cd</span> linux-vm-tools/fedora<br>$ sudo ./install-config.sh<br></code></pre></div></td></tr></table></figure><p>虚拟机关机, 打开 PowerShell （需要管理员权限） <figure class="highlight gams"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gams">PowerShell&gt; <span class="hljs-keyword">Set</span>-VM <span class="hljs-comment">-VMName &lt;your_vm_name&gt; -EnhancedSessionTransportType HvSocket</span><br></code></pre></div></td></tr></table></figure> 重新打开虚拟机即可</p><h2 id="效果">效果</h2><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/karuboniru/blog_imgs@master/20200822104108.png" alt="结果" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/karuboniru/blog_imgs@master/20200822103957.png" alt="登录界面" /></div><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/karuboniru/blog_imgs@master/20200822103919.png" alt="增强会话选项" /></div></div></div><h2 id="detail-你多干了啥">Detail: 你多干了啥</h2><p>主要是为了让 SELinux 高兴增加了模块： <figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">module allow-vsock 1.0;<br> <br>require &#123;<br>       <span class="hljs-built_in"> type </span>unconfined_service_t;<br>       <span class="hljs-built_in"> type </span>unlabeled_t;<br>        class vsock_socket &#123; getattr read write &#125;;<br>&#125;<br> <br><span class="hljs-comment">#============= unconfined_service_t ==============</span><br>allow unconfined_service_t unlabeled_t:vsock_socket &#123; getattr read write &#125;;<br></code></pre></div></td></tr></table></figure></p><p>但是新版本的 xrdp 貌似自带类似的模块，但是为了保证开箱即用就还是加上吧。</p><h2 id="后文">后文</h2><p>脚本是照着 <a href="https://github.com/microsoft/linux-vm-tools/tree/master/arch">Arch 的版本</a> 改的，<a href="https://github.com/microsoft/linux-vm-tools/pull/124">PR</a> 却没人 review，固有此文。不高兴，希望所有 PR 都能被善良对待。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="瞎折腾" scheme="https://yanqiyu.info/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="瞎折腾" scheme="https://yanqiyu.info/tags/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>Trojan for Fedora and EPEL</title>
    <link href="https://yanqiyu.info/2020/06/21/trojan-for-fedora/"/>
    <id>https://yanqiyu.info/2020/06/21/trojan-for-fedora/</id>
    <published>2020-06-21T01:12:50.000Z</published>
    <updated>2020-06-21T01:12:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/trojan-gfw/trojan/">Trojan</a> 即将在 Fedora 操作系统官方源(含 EPEL 8)可用🎉.</p><p>详情可见 <a href="https://bodhi.fedoraproject.org/updates/?search=trojan">Fedora Bodhi</a>, 以及 <a href="https://github.com/trojan-gfw/trojan/issues/462">Trojan issue #462</a>.</p><p>在 Trojan 进入 stable 仓库之后我会去更新一下 Trojan 那边的安装教程, 顺便在这里也写一下. 等到软件进入 Testing 之后大家也可以帮忙测试. 有这个版本特有的问题（来自于打包等的问题）请汇报<a href="https://bugzilla.redhat.com/buglist.cgi?bug_status=NEW&amp;bug_status=ASSIGNED&amp;classification=Fedora&amp;component=trojan&amp;product=Fedora&amp;product=Fedora%20EPEL">Bugzilla</a>或者是<a href="mailto:yanqiyu@fedoraproject.org">邮件联系我</a>. 来自于上游的问题可以<a href="https://github.com/trojan-gfw/trojan/issues">直接汇报给上游</a>, 但请注明软件包安装来源.</p><h2 id="update-20622">Update 20/6/22</h2><p>已经可用 <figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">Package</span>: trojan-<span class="hljs-number">1</span>.<span class="hljs-number">16</span>.<span class="hljs-number">0</span>-<span class="hljs-number">4</span>.fc<span class="hljs-number">33</span><br><span class="hljs-attribute">Summary</span>: An unidentifiable mechanism that helps you avoid censorship<br><span class="hljs-attribute">RPMs</span>:    trojan<br><span class="hljs-attribute">Size</span>:    <span class="hljs-number">1</span>.<span class="hljs-number">54</span> MiB<br></code></pre></div></td></tr></table></figure></p><h1 id="接下来是-clash">接下来是 clash</h1><p>Clash 已经在 fedora 官方源可用!</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="瞎折腾" scheme="https://yanqiyu.info/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="打包" scheme="https://yanqiyu.info/tags/%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>Geant 4 的一个坑</title>
    <link href="https://yanqiyu.info/2020/05/13/Geant4-one-pitfall/"/>
    <id>https://yanqiyu.info/2020/05/13/Geant4-one-pitfall/</id>
    <published>2020-05-13T08:18:07.000Z</published>
    <updated>2020-05-13T08:18:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主题在 Geant 4 的官方论坛讨论<a href="https://geant4-forum.web.cern.ch/t/step-action-tends-to-happen-at-certain-point/2489">在此</a>. 感谢论坛用户 maire 没有它的提醒我现在还没走出代码苦海.</p><h2 id="遇到问题">遇到问题</h2><p>因为给最近在学习 Geant 4, 在老师的要求下准备写一个程序模拟获得质子行进的 <span class="math inline">\(\require{physics}\dv{E}{x}\)</span> 数据, 一开始我直接记录下每个 Step 的能量损失以及 <code>PostStepPoint</code> 对应的坐标. 然后对于质子穿透范围划成多个 bin, 将能量沉积填入其中.</p><p>但是事与愿违: 我得到了这样的直方图: <img src="https://cdn.jsdelivr.net/gh/karuboniru/blog_imgs@master/20200506185055.png" alt="问题图片" /></p><p>它不正常, 一个质子行进的 <span class="math inline">\(\dv{E}{x}\)</span> 作图应该表现为单峰结构: <a href="https://en.wikipedia.org/wiki/Bragg_peak">Bragg Peak</a>. 但是可以看到在<span class="math inline">\(x = 5 \,\rm{cm}\)</span> 上出现一个峰值.</p><p>OK, 出现了问题就去找问题.</p><h2 id="寻找源头">寻找源头</h2><p><strong>理应</strong><span class="math inline">\(x = 5 \,\rm{cm}\)</span>附近不会有任何特殊性质, 至少在我的代码中 -- 说明问题出在 Geant 4, 我有什么地方用错了! 于是作图寻找什么与我的预期不一致:</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/karuboniru/blog_imgs@master/20200513163759.png" alt="步长直方图" /></div><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/karuboniru/blog_imgs@master/20200513163953.png" alt="步长-PostStepPoint坐标直方图" /></div></div></div><p>这两张图是我觉得提示了不一致的地方:</p><ul><li>步长比我想象中的长, 我预期 <span class="math inline">\(1 \,\rm{cm}\)</span> 长度会有数十次碰撞, 但是 Geant 4 追踪出现了数厘米的长度的 Step.</li><li>步长被截断, 在 <span class="math inline">\(5 \,\rm{cm}\)</span> 附近.</li></ul><p>OK, 问题成因就很容易了解了, 因为有相当事例的 Step 跨越了多个 bin, 并且有相当部分因为截断堆在了一起, 造成了一个 bin 取值很大.</p><h3 id="查看源代码研究-hioni-过程究竟怎么定义的">查看源代码研究 <code>hIoni</code> 过程究竟怎么定义的</h3><p>云里雾里的看了<a href="https://github.com/Geant4/geant4">这里</a>的众多代码 <del>(点名批评 VScode, 打开这个代码, 看一会, 我的内存就没了)</del>, 勉强有了头绪.</p><ul><li><code>G4hIonisation</code> 的基类是 <code>G4VContinuousDiscreteProcess</code>, 既包含连续过程又包含离散过程</li><li><code>G4hIonisation</code> 能量损失计算还是 <code>G4BetheBlochModel</code> 来计算</li></ul><p>那么我们就对于 <code>G4hIonisation</code> 的行为有了一些图像了:</p><ul><li>它通过 Bethe-Bloch 模型计算能量损失, 这是连续的(每厘米数十次碰撞体现在此处), 但是大多数碰撞损失能力很小, Geant 4不关心</li><li>对于能量较高的次级粒子, 比如<span class="math inline">\(\delta\)</span>-电子, 采取离散过程, 调用 <code>SteppingAction</code>, 这里我设置的 Hook 才会被调用, 而记录数据.</li></ul><h2 id="怎么平均">怎么平均?</h2><p>现在我期望将跨越多个 bin 的数据平均到其跨越的每个 bin, 可惜, 这件事情很麻烦, 因为 <code>CERN ROOT</code> 遍历一个 <code>Tree</code> 不是很方便(你可以很轻松的从 <code>Tree</code> 中获得直方图, 但是要遍历 <code>Tree</code> 却没有提供迭代器, 只能靠 <code>TBranchAddress</code> 来遍历)</p><p>这个时候出现论坛回复, 告诉我 <code>TestEM11</code> 可以做一样的事情, 还没有我遇到的问题.</p><p>跑去看一眼 <code>TestEM11</code> 的代码: <figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SteppingAction::UserSteppingAction</span><span class="hljs-params">(<span class="hljs-keyword">const</span> G4Step* <span class="hljs-built_in">step</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>...<br> <span class="hljs-comment">//longitudinal profile of deposited energy</span><br> <span class="hljs-comment">//randomize point of energy deposotion</span><br> <span class="hljs-comment">//</span><br> G4StepPoint* prePoint  = <span class="hljs-built_in">step</span>-&gt;GetPreStepPoint();<br> G4StepPoint* postPoint = <span class="hljs-built_in">step</span>-&gt;GetPostStepPoint();<br> G4ThreeVector P1 = prePoint -&gt;GetPosition();<br> G4ThreeVector P2 = postPoint-&gt;GetPosition();<br> G4ThreeVector <span class="hljs-built_in">point</span> = P1 + G4UniformRand()*(P2 - P1);<br> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">step</span>-&gt;GetTrack()-&gt;GetDefinition()-&gt;GetPDGCharge() == <span class="hljs-number">0.</span>) <span class="hljs-built_in">point</span> = P2;<br> G4double x = <span class="hljs-built_in">point</span>.x();<br> G4double xshifted = x + <span class="hljs-number">0.5</span>*fDetector-&gt;GetAbsorSizeX();<br> analysisManager-&gt;FillH1(<span class="hljs-number">1</span>, xshifted, edep);<br>...<br>&#125;<br></code></pre></div></td></tr></table></figure> 马上干一样的事情:</p><p><img src="https://cdn.jsdelivr.net/gh/karuboniru/blog_imgs@master/20200510175013.png" alt="Fixed" /> 修好了, 美妙.</p><h2 id="经验">经验</h2><ul><li>蒙特卡洛模拟的时候, 一个均匀的随机数可以充当平均</li><li>有些软件实现可能和物理直觉不一致, 用的时候不要根据物理自觉做过多假设</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="物理" scheme="https://yanqiyu.info/categories/%E7%89%A9%E7%90%86/"/>
    
    
      <category term="Geant 4" scheme="https://yanqiyu.info/tags/Geant-4/"/>
    
  </entry>
  
  <entry>
    <title>诺特定律</title>
    <link href="https://yanqiyu.info/2020/03/30/Noetherstheorem/"/>
    <id>https://yanqiyu.info/2020/03/30/Noetherstheorem/</id>
    <published>2020-03-30T13:33:47.000Z</published>
    <updated>2020-03-30T13:33:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>诺特定律, 也即对称性蕴含守恒流, 更加准确的说法是</p><p>每一个局部作用的可微的对称性, 都蕴含某种守恒流.</p><h3 id="什么是守恒流">什么是守恒流</h3><p>守恒流是满足: <span class="math display">\[\require{physics}\partial_\mu j^\mu = 0\]</span> 的一个场.</p><h3 id="场在对称变换下的描述">场在对称变换下的描述</h3><p>而对称性的考量数学上就有两种看法</p><ul><li>主动视角, 对应参照系不变, 物理点运动;</li><li>被动视角, 物理点不变, 参照系运动.</li></ul><p>接下来我们会更加自然的考虑后者, 因为后者更加容易给出明确的数学表示.</p><p>也就是时空点<span class="math inline">\(P\)</span>, 坐标<span class="math inline">\(x^\mu\)</span>, 场<span class="math inline">\(f\left(x^\mu\right)\)</span>, 变为坐标<span class="math inline">\(x&#39;^\mu\)</span>, 场<span class="math inline">\(f&#39;\left(x&#39;^\mu\right)\)</span>,</p><p>考虑在一个无穷小变换<span class="math inline">\(x&#39; \to x + \delta x\)</span>下, 场的变换可以写作: <span class="math display">\[\begin{aligned}    \delta f    &amp; = f&#39;(x&#39;^\mu) - f(x^\mu)   \\                &amp; = f&#39;(x^\mu + \delta x^\mu) - f(x^\mu)\\                &amp; = f&#39;(x^\mu) - f(x) + \delta x^\mu\partial_\mu f&#39;(x^\mu) + \mathcal{O}(\delta x^2) \\                &amp; = f&#39;(x^\mu) - f(x) + \delta x^\mu\partial_\mu f(x^\mu) + \mathcal{O}(\delta x^2)\end{aligned}\]</span></p><p>而<span class="math inline">\(\partial_\mu f&#39;\)</span>被换成<span class="math inline">\(\partial_\mu f\)</span>带来的差异不会大于<span class="math inline">\(\delta x\)</span>的一阶. 并定义<span class="math inline">\(f&#39;(x^\mu) - f(x)\)</span>为<span class="math inline">\(\delta_0 f\)</span>从而可以写出: <span class="math display">\[\delta f = \delta_0 f + \delta x^\mu\partial_\mu f\]</span> 或者说 <span class="math display">\[\delta = \delta_0 + \delta x^\mu\partial_\mu\]</span> 其中<span class="math inline">\(\delta_0 f\)</span>表述场本身的变化, 而<span class="math inline">\(\delta x^\mu\partial_\mu f\)</span>表示由于点坐标的变化带来的变化.</p><blockquote><p>对于时空平移变换<span class="math inline">\(x&#39;^\mu = x^\mu + a^\mu,\,\delta\phi = 0\)</span></p><p>此时有 <span class="math display">\[\delta_0 \phi = - a^\mu\partial_\mu\phi\]</span> 其实这就对应于场在平移下的变换: <span class="math display">\[\phi&#39;(x^\mu) = \phi(x^\mu - a^\mu)\]</span></p></blockquote><p>在此之外, 场可能有内禀变换, 此时<span class="math inline">\(\delta x = 0\)</span>, 变化的只有场.</p><h2 id="诺特流的推导">诺特流的推导</h2><p>考虑一个场, 其作用量可以写作 <span class="math display">\[S(\phi(x)) = \int \dd[4]{x} \mathcal{L}(\phi, \partial_\mu\phi,x)\]</span></p><p>系统的演化路径遵循<span class="math inline">\(\delta S = 0\)</span>, 则: <span class="math display">\[\begin{aligned}0 = \delta S &amp;= \int\left[\delta(\dd[4]{x})\mathcal{L}+\dd[4]{x}\delta\mathcal{L}\right]\\&amp; = \int\dd[4]{x}(\partial_\mu\delta x^\mu\mathcal{L}+\delta\mathcal{L})\end{aligned}\]</span> 而根据前文以及链式法则 <span class="math display">\[\begin{aligned}\delta \mathcal{L} &amp;= \delta x^\mu\partial_\mu\mathcal{L} + \delta_0\mathcal{L}\\&amp;= \delta x^\mu \partial_\mu\mathcal{L}+ \frac{\partial\mathcal{L}}{\partial\phi}\delta_0\phi + \frac{\partial \mathcal{L}}{\partial (\partial_\mu \phi)}\delta_0(\partial_\mu\phi) \\&amp;= \delta x^\mu \partial_\mu\mathcal{L} + \left[ \frac{\partial\mathcal{L}}{\partial \phi} - \partial_\mu \frac{\partial\mathcal{L}}{\partial (\partial_\mu \phi)} \right] \delta_0\phi + \partial_\mu\left( \frac{\partial\mathcal{L}}{\partial (\partial_\mu \phi)}\delta_0\phi \right)\end{aligned}\]</span> 最后一步是使用了分部积分, 并且使用了<span class="math inline">\(\delta_0(\partial_\mu\phi) = \partial_\mu(\delta_0\mu\phi)\)</span>. 同时注意到有: <span class="math display">\[\frac{\partial\mathcal{L}}{\partial \phi} - \partial_\mu \frac{\partial\mathcal{L}}{\partial (\partial_\mu \phi)} = 0\]</span> 这是场的欧拉-拉格朗日运动方程. 则 <span class="math display">\[\begin{aligned}0 = \delta S &amp; = \int \dd[4]{x} \partial_\mu\left(\delta x^\mu \mathcal{L}  + \frac{\partial\mathcal{L}}{\partial (\partial_\mu \phi)}\delta_0\phi\right)\end{aligned}\]</span> 考虑到变分的任意性, 则有<span class="math inline">\(\partial_\mu\left(\delta x^\mu \mathcal{L} + \frac{\partial\mathcal{L}}{\partial (\partial_\mu \phi)}\delta_0\phi\right) = 0\)</span>, 对扩号内的部分使用<span class="math inline">\(\delta_0 = \delta - \delta x^\mu\partial_\mu\)</span>, 则:</p><p><span class="math display">\[\begin{aligned}0 = \delta S&amp;= \int \dd[4]{x}\partial_\mu \left[\mathcal{L}\delta x^\mu + \frac{\partial\mathcal{L}}{\partial (\partial_\mu \phi)} (\delta - \delta x^\nu\partial_\nu)\phi\right] \\&amp; = \int \dd[4]{x}\partial_\mu\left[ \left(\mathcal{L}\delta^\nu_\mu - \frac{\partial\mathcal{L}}{\partial (\partial_\mu \phi)}\partial_\nu \phi\right)\delta x^\nu +\frac{\partial\mathcal{L}}{\partial (\partial_\mu \phi)} \delta\phi \right]\end{aligned}\]</span> 这样, 就得到了一个守恒流, 也就是本文的核心: <span class="math display">\[j^\mu = \left(\mathcal{L}\delta^\nu_\mu - \frac{\partial\mathcal{L}}{\partial (\partial_\mu \phi)}\partial_\nu \phi\right)\delta x^\nu +\frac{\partial\mathcal{L}}{\partial (\partial_\mu \phi)} \delta\phi\]</span></p><h3 id="诺特荷">诺特荷</h3><p>对于一个在有限空间内分布的流(无穷远处, 场应该趋近于零, 这是其物理意义要求的), 考虑场的等时变分 <span class="math display">\[\begin{aligned}0   &amp; = \int \dd[4]{x}\partial_\mu j^\mu        \\    &amp; = \int_{t_1}^{t_2} \dd{x}^0 \int \dd{x}^3 \left(\partial_0 j^0 + \nabla \cdot \vec{j}\right)      \\    &amp; =  \int_{t_1}^{t_2} \dd{x}^0 \partial_0 \int \dd[3]{x}j^0     \\    &amp; = Q(t_2) - Q(t_1) \end{aligned}\]</span></p><p>则<span class="math inline">\(Q = \int \dd[3]{x}j^0\)</span>就是诺特荷, 是在这个对称性给出的守恒量.</p><h2 id="举例">举例</h2><p>对于时空平移变换的特殊情况:</p><blockquote><p>平移变换具有各向同性(说人话就是朝着时空四个轴有四个<strong>生成元</strong>) 那么, 诺特流就会升级成为能量动量张量 原来的守恒流长这样 <span class="math display">\[j^\mu = \left(\mathcal{L}\delta^\nu_\mu - \frac{\partial\mathcal{L}}{\partial (\partial_\mu \phi)}\partial_\nu \phi\right)\delta x^\nu +\frac{\partial\mathcal{L}}{\partial (\partial_\mu \phi)} \delta\phi\]</span> 去掉场的本身的变换:<span class="math inline">\(\delta\phi = 0\)</span>, 考虑到<span class="math inline">\(\delta x^\nu = a^\nu\)</span>的任意性 <span class="math display">\[\partial_\mu\left(\mathcal{L}\delta^\nu_\mu - \frac{\partial\mathcal{L}}{\partial (\partial_\mu \phi)}\partial_\nu \phi\right) = 0\]</span> 这就是场论的能量动量张量: <span class="math display">\[\begin{aligned}T^{\mu}_{\nu} =  \left(- \mathcal{L}\delta^\nu_\mu + \frac{\partial\mathcal{L}}{\partial (\partial_\mu \phi)}\partial_\nu \phi\right) \\T^{\mu\nu} =  \left(- \mathcal{L}\eta^{\mu\nu} + \frac{\partial\mathcal{L}}{\partial (\partial_\mu \phi)}\partial^\nu \phi\right)\end{aligned}\]</span></p></blockquote><p>对于一个场的内禀变换而言, 比如复 Klein-Gordon 场的<span class="math inline">\(U(1)\)</span>对称性</p><blockquote><p><span class="math display">\[\begin{aligned}  \phi    &amp;\to \mathrm{e}^{i\alpha} \phi  \\  \phi^*  &amp;\to \mathrm{e}^{-i\alpha} \phi^*\end{aligned}\]</span> 借助生成元<span class="math inline">\(\delta\phi = i\phi,\, \delta\phi^* = i\phi^*\)</span>, 可以写出 <span class="math display">\[j^\mu = i\left[ (\partial^\mu \phi^*)\phi - \phi^*(\partial^\mu \phi)\right]\]</span> 它对应的守恒荷就是: <span class="math display">\[Q = \int \dd[3]{x}j^0 = i\int \dd[3]{x}\left(\dot{\phi}^*\phi - \phi^*\dot{\phi}\right)\]</span> 可以通过正则量子化计算发现这个守恒就对应电荷守恒.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="物理" scheme="https://yanqiyu.info/categories/%E7%89%A9%E7%90%86/"/>
    
    
      <category term="学习" scheme="https://yanqiyu.info/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>博客创建过程与总结</title>
    <link href="https://yanqiyu.info/2020/03/30/building/"/>
    <id>https://yanqiyu.info/2020/03/30/building/</id>
    <published>2020-03-30T05:11:58.000Z</published>
    <updated>2020-03-30T05:11:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>至此, 博客建站算是完成了, 整个过程历时三天, 由于一些强迫症修各种细节花了我不少时间.</p><h2 id="主题">主题</h2><p>本站使用的主题是 <a href="https://github.com/karuboniru/hexo-theme-fluid">我改过的 fluid</a>, 改动可以看链接里面的 <a href="https://github.com/karuboniru/hexo-theme-fluid">commits</a>, 其中有些改动已经提了 Pull Request 并且已经被接受, 但是还有一些并非 bug 修复或者是改进, 只是个人喜好, 于是就不 PR 了.</p><p>我的版本的 fluid 相对 <a href="https://github.com/fluid-dev/hexo-theme-fluid">原版</a> 改动(没有合并进入 master 的)有以下 :</p><ul><li>添加了 PWA 支持, 本站现在是 PWA 网站, 你甚至可以作为应用安装它;</li><li><del>尽可能使用 <a href="https://cdnjs.com/">cdnjs</a> 作为静态脚本来源, 这是为了即将到来的 HTTP/3 做准备, 静态资源来自同一个源能借助 0-RTT加速访问;</del> 换成了 jsdelivr, CDNjs 太慢了, jsdelivr 在全球都有节点, 是好东西.</li><li><del>修复了统计相关的(可能影响加载速度的)一个轻微 bug, 合并到了原项目的 dev 分支.</del>(也进入master了)</li><li>MathJax 升级到 MathJax 3.0.1, 加载及渲染更快.</li></ul><p>因为一些静态资源被我放到了站点内部, 于是大家想要使用我修改之后的主题需要一并带上 <code>source/css</code> 里面的东西. <del>真的有人会用吗?</del></p><p>但是真的有人想用的话可以直接 fork <a href="https://github.com/karuboniru/blog_ci">blog_ci</a> 仓库, 改下配置文件和持续集成脚本, 设置好 secrets, 应该就能用了.</p><h3 id="文章页面-banner-随机图片">文章页面 banner 随机图片</h3><p>banner 接口用的是 <a href="https://www.52ecy.cn/post-125.html">阿珏博客</a> 提供的 API. 使用超级简单, 感谢大佬.</p><h2 id="pwa">PWA</h2><p>本站有完全的 PWA <a href="https://googlechrome.github.io/lighthouse/viewer/?psiurl=https%3A%2F%2Fyanqiyu.info%2F&amp;strategy=desktop&amp;category=performance&amp;category=accessibility&amp;category=best-practices&amp;category=seo&amp;category=pwa&amp;utm_source=lh-chrome-ext#pwa">支持</a>:</p><p><img src="https://cdn.jsdelivr.net/gh/karuboniru/blog_imgs@master/2020-03-30-130142.webp" /></p><p>PWA 支持是由 <a href="https://github.com/JLHwung/hexo-offline">hexo-offline</a> 包提供的代码. PWA 意味着只要加载过, 缓存还在, 之后加载就会很快</p><h2 id="持续集成">持续集成</h2><p>本站使用 <a href="https://hexo.io">Hexo</a>, 作为静态网站, 需要从 Markdown 生成 HTML. 为了方便到处写东西而不需要使用电脑, 于是我<del>白嫖</del>使用了 <a href="https://github.com/features/actions">GitHub Actions</a>, 对于项目源代码分割成了三个仓库:</p><ul><li><a href="https://github.com/karuboniru/hexo-theme-fluid">主题</a></li><li><a href="https://github.com/karuboniru/blog_md">文章</a>: 每次 push 触发更新 Hexo 工作区的 <code>submodule</code> 并push, 并触发 Hexo 工作区的持续集成;</li><li><a href="https://github.com/karuboniru/blog_ci">Hexo 工作区</a>: 每次 push 更新网页.</li></ul><p>然后每次添加文章只需要修改 <a href="https://github.com/karuboniru/blog_md">文章</a> 这个仓库就能保证其他东西跟着更新了. 但是主题不做持续集成是因为给我觉得修改主题的事情还是先本地看下效果为好, 免得翻车.</p><p>由于层层缓存的存在, 更新需要数分钟才能被看到, 我也没得法, 我也懒得管.</p><h2 id="写东西">写东西</h2><p>写东西就用神奇的 <a href="https://typora.io/">Typora</a>, 支持所见即所得的 Markdown 编辑器, 这个我要安利一波! 甚至于可以用来做课堂笔记!</p><h2 id="奇妙的-bug">奇妙的 BUG</h2><p>在这里 <code>hexo-asset-image</code> 不能正确地生成图片链接, 要换成 <code>hexo-asset-image-fix</code>. 这是我全程遇到的最奇妙的 BUG 了.</p><p>本文也算不上是教程, 之所以我不写教程是因为网上大多有相关教程, 魔改主题这件事情我也是新手, 基本是猜着语法改, 也没与可学习的.</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://yanqiyu.info/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="记录" scheme="https://yanqiyu.info/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>一些绝妙的 WSL 技巧</title>
    <link href="https://yanqiyu.info/2020/03/27/wsl-trick/"/>
    <id>https://yanqiyu.info/2020/03/27/wsl-trick/</id>
    <published>2020-03-27T09:54:47.000Z</published>
    <updated>2020-03-27T09:54:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>想起来了就更新一点:</p><h2 id="统一-dbus-会话">统一 DBUS 会话</h2><p>Linux 下有些程序会通过 dbus 来启动, 如果没有 dbus 的话就会出错或者花很长时间开个新的 dbus. 使用: <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">daemonize -e /tmp/dbus-<span class="hljs-variable">$&#123;USER&#125;</span>.<span class="hljs-built_in">log</span> -o /tmp/dbus-<span class="hljs-variable">$&#123;USER&#125;</span>.<span class="hljs-built_in">log</span> -p /tmp/dbus-<span class="hljs-variable">$&#123;USER&#125;</span>.pid -l /tmp/dbus-<span class="hljs-variable">$&#123;USER&#125;</span>.pid -a /usr/bin/dbus-daemon --address=<span class="hljs-string">&quot;unix:path=/tmp/dbus-<span class="hljs-variable">$&#123;USER&#125;</span>&quot;</span> --session --nofork  &gt;&gt;/dev/null 2&gt;&amp;1<br><span class="hljs-built_in">export</span> DBUS_SESSION_BUS_ADDRESS=<span class="hljs-string">&quot;unix:path=/tmp/dbus-<span class="hljs-variable">$&#123;USER&#125;</span>&quot;</span><br></code></pre></div></td></tr></table></figure> 加到 <code>~/.bash_profile</code> 就可以在每次启动 wsl 实例时启动dbus, 然后让所有会话用这个 dbus 实例. <code>/tmp/dbus-$&#123;USER&#125;</code> 可以相应的修改成你喜欢的路径</p><h2 id="经过修改的-xdg-open">经过修改的 xdg-open</h2><p><a href="https://github.com/cpbotha/xdg-open-wsl">这里</a> 有魔改版的 <code>xdg-open</code>, 放到你的可执行文件路径里面, 就可以用 <code>xdg-open</code> 命令调用 Windows 下的程序进行操作了(例如 jupyter 打开浏览器以及 texdoc 打开帮助文档 pdf).</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://yanqiyu.info/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="瞎折腾" scheme="https://yanqiyu.info/tags/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
      <category term="WSL" scheme="https://yanqiyu.info/tags/WSL/"/>
    
  </entry>
  
  <entry>
    <title>在 WSL 2 下运行 Anbox</title>
    <link href="https://yanqiyu.info/2020/03/27/anbox-in-wsl/"/>
    <id>https://yanqiyu.info/2020/03/27/anbox-in-wsl/</id>
    <published>2020-03-27T04:53:49.000Z</published>
    <updated>2020-03-27T04:53:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍">介绍</h2><p>这本来是我之前在 reddit 上面发的一个 <a href="https://www.reddit.com/r/bashonubuntuonwindows/comments/eofn5s/run_anbox_on_wsl_2/">帖子</a>. 现在干脆把它重新写成中文, 姑且算是给自己引流.</p><p><a href="https://anbox.io/">Anbox</a> 实现了基于 lxc 的 Android on Linux 支持, 由于 WSL 2 就是完整的 Linux, 于是稍加折腾就能跑起来了.</p><h2 id="安装-anbox">安装 anbox</h2><p>我在 <a href="https://copr.fedorainfracloud.org/coprs/yanqiyu/anbox/">copr</a> 上有现成的 Anbox build, 直接安装即可. 我使用的 WSL 内发行版是 <a href="https://github.com/WhitewaterFoundry/Fedora-Remix-for-WSL">Fedora Remix</a>.</p><p>Ubuntu 上我也试过, <strong>但是不能正常显示(窗口啥都没有)</strong>, 但是 <strong>Android 跑起来了</strong>, 可能是 SDL 的锅. 跑 <strong>Arch</strong> 的 WSL 也能跑起来 <strong>步骤几乎相同</strong>. <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">$ sudo dnf copr <span class="hljs-built_in">enable</span> yanqiyu/anbox<br>$ sudo dnf install anbox<br></code></pre></div></td></tr></table></figure></p><h2 id="从源代码编译">从源代码编译</h2><p>你需要 <a href="https://github.com/anbox/anbox-modules">anbox-modules</a> 和 <a href="https://github.com/microsoft/WSL2-Linux-Kernel/releases">kernel</a> 的源代码. 内核源代码选择和你的 WSL 一致的版本(<code>uname -r</code>).</p><p>我这儿是 <code>4.19.84-microsoft-standard</code>, 下面的步骤以此为例, 如果你的版本不一样, 直接换掉版本就成.</p><p>解压并准备好编译. (我把它解压到了 <code>~/WSL2-Linux-Kernel-4.19.84-microsoft-standard</code>). <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">$ <span class="hljs-built_in">cd</span> WSL2-Linux-Kernel-4.19.84-microsoft-standard<br>$ cp /proc/config.gz ./<br>$ gzip -d config.gz<br>$ mv config .config<br>$ sudo dnf install bison flex elfutils-libelf-devel openssl-devel -y<br>$ make prepare<br>$ make modules_prepare<br>$ sudo mkdir -p /lib/modules/4.19.84-microsoft-standard<br>$ sudo ln /home/(USERNAME)/WSL2-Linux-Kernel-4.19.84-microsoft-standard -s /lib/modules/4.19.84-microsoft-standard/build<br></code></pre></div></td></tr></table></figure> 编译模块 <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">$ git <span class="hljs-built_in">clone</span> https://github.com/anbox/anbox-modules.git<br>$ sudo cp -rT ashmem /usr/src/anbox-ashmem-1<br>$ sudo cp -rT binder /usr/src/anbox-binder-1<br>$ sudo dkms install anbox-ashmem/1<br>$ sudo dkms install anbox-binder/1<br></code></pre></div></td></tr></table></figure> 安装模块 <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">$ sudo modprobe ashmem_linux<br>$ sudo modprobe binder_linux<br></code></pre></div></td></tr></table></figure> 可能会有报错, 完全正常, 只要下面的命令输出提示模块正常工作就行 <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">$ lsmod | grep -e ashmem_linux -e binder_linux<br>$ ls -alh /dev/binder /dev/ashmem<br></code></pre></div></td></tr></table></figure></p><h2 id="安装-android-镜像">安装 Android 镜像</h2><p>在 <a href="https://build.anbox.io/android-images">这里</a> 下载 Android 镜像</p><p>放到 <code>/var/lib/anbox/android.img</code></p><h2 id="启动-anbox">启动 anbox!</h2><h3 id="提前准备">提前准备</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">$ <span class="hljs-built_in">export</span> $(dbus-launch)<br>$ mkdir /tmp/runtime-user<br>$ <span class="hljs-built_in">export</span> XDG_RUNTIME_DIR=/tmp/runtime-user<br></code></pre></div></td></tr></table></figure><h3 id="运行">运行!</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">$ sudo /usr/share/anbox/anbox-bridge.sh start<br>$ sudo daemonize /usr/bin/anbox container-manager --daemon --privileged --data-path=/var/lib/anbox<br>$ anbox launch --package=org.anbox.appmgr --component=org.anbox.appmgr.AppViewActivity<br></code></pre></div></td></tr></table></figure><h2 id="修复网络">修复网络</h2><p>使用 <code>/usr/share/anbox/anbox-shell.sh</code> 的脚本获得 Anbox 中的管理员权限 <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">ip route add default dev eth0 via 192.168.250.1<br>ip rule add pref 32766 table main<br>ip rule add pref 32767 table <span class="hljs-built_in">local</span><br></code></pre></div></td></tr></table></figure></p><h2 id="效果">效果</h2><figure><img src="https://cdn.jsdelivr.net/gh/karuboniru/blog_imgs@master/20200404211503.webp" alt="" /><figcaption>运行截图</figcaption></figure><h2 id="当前问题">当前问题</h2><ul><li>试图打开设置首页铁定会崩溃, 可能和 <a href="https://github.com/anbox/anbox-modules/issues/41">这个</a> 有关</li><li>Ubuntu 下不好使, 虽然可能和 SDL 之类的有关, 但是我也不想管</li><li>没图形加速</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://yanqiyu.info/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="瞎折腾" scheme="https://yanqiyu.info/tags/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
      <category term="WSL" scheme="https://yanqiyu.info/tags/WSL/"/>
    
  </entry>
  
  <entry>
    <title>规划</title>
    <link href="https://yanqiyu.info/2020/03/27/plan/"/>
    <id>https://yanqiyu.info/2020/03/27/plan/</id>
    <published>2020-03-27T04:47:48.000Z</published>
    <updated>2020-03-27T04:47:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为万恶的知乎审查逐渐疯狂, 于是机智的我决定注销愚蠢的知乎, 转向使用美妙的 <a href="https://hexo.io/">Hexo</a>.</p><p>之后准备闲下来的时候写点关于 <a href="http://geant4.org/">Geant4</a> 和 <a href="https://root.cern/">ROOT</a> 的文章, 也算是给后来人开路吧... 闲下来之后.</p><p>因为这里看起来支持 <span class="math inline">\(\LaTeX\)</span>, 可能会有一些物理的东西?</p><p>MathJax 实验: <span class="math inline">\(\begin{bmatrix}a &amp; b \\ c &amp; d\end{bmatrix}\)</span>, 不过评论区貌似有一些奇怪的 bug, 这是因为 markdown 的转义行为, 发表 <span class="math inline">\(\LaTeX\)</span> 可以先预览一下看看是否踩坑.</p><p>Code Block 实验： <figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">[ <span class="hljs-number">-1</span> ]<br>[ <span class="hljs-number">2</span> ]<br></code></pre></div></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="杂项" scheme="https://yanqiyu.info/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
  </entry>
  
</feed>
